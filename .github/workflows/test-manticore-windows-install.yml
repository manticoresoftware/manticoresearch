name: Test Manticore Installation and Startup

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-manticore:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: System Information
      run: |
        echo "=== SYSTEM INFORMATION ===" | Tee-Object -FilePath manticore_test_log.txt
        echo "Windows Version:" | Tee-Object -FilePath manticore_test_log.txt -Append
        Get-CimInstance Win32_OperatingSystem | Select-Object WindowsProductName, WindowsVersion, WindowsBuildLabEx | Tee-Object -FilePath manticore_test_log.txt -Append
        echo "Current user: $env:USERNAME" | Tee-Object -FilePath manticore_test_log.txt -Append
        echo "Available disk space:" | Tee-Object -FilePath manticore_test_log.txt -Append
        Get-PSDrive C | Select-Object Used,Free | Tee-Object -FilePath manticore_test_log.txt -Append
      shell: pwsh
    
    - name: Check Docker Availability
      run: |
        echo "=== CHECKING DOCKER AVAILABILITY ===" | Tee-Object -FilePath manticore_test_log.txt -Append
        try {
          $dockerVersion = docker --version 2>&1
          echo "✅ Docker version: $dockerVersion" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          echo "Checking Docker daemon status..." | Tee-Object -FilePath manticore_test_log.txt -Append
          docker info 2>&1 | Select-Object -First 10 | Tee-Object -FilePath manticore_test_log.txt -Append
          echo "✅ Docker daemon is running" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          echo "Testing Docker with hello-world..." | Tee-Object -FilePath manticore_test_log.txt -Append
          docker run --rm hello-world 2>&1 | Select-Object -First 5 | Tee-Object -FilePath manticore_test_log.txt -Append
          echo "✅ Docker hello-world test successful" | Tee-Object -FilePath manticore_test_log.txt -Append
        } catch {
          echo "❌ Docker is not available: $_" | Tee-Object -FilePath manticore_test_log.txt -Append
        }
      shell: pwsh
    
    - name: Download Official Manticore Installer
      run: |
        echo "=== DOWNLOADING OFFICIAL MANTICORE INSTALLER ===" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        $installerUrl = "https://repo.manticoresearch.com/repository/manticoresearch_windows/release/x64/manticore-13.6.7-25080704-1ab9ccc95-x64.exe"
        $installerPath = "manticore-installer.exe"
        
        echo "Downloading from: $installerUrl" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        try {
          # Download with progress
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath -UseBasicParsing
          
          if (Test-Path $installerPath) {
            $fileInfo = Get-Item $installerPath
            $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
            echo "✅ Downloaded installer: $installerPath" | Tee-Object -FilePath manticore_test_log.txt -Append
            echo "File size: $($fileInfo.Length) bytes ($fileSizeMB MB)" | Tee-Object -FilePath manticore_test_log.txt -Append
          } else {
            throw "Installer file not found after download"
          }
        } catch {
          echo "❌ Failed to download installer: $_" | Tee-Object -FilePath manticore_test_log.txt -Append
          exit 1
        }
      shell: pwsh
    
    - name: Install Manticore
      run: |
        echo "=== INSTALLING MANTICORE ===" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        $installerPath = "manticore-installer.exe"
        $installDir = "C:\Manticore"
        
        echo "Installer: $installerPath" | Tee-Object -FilePath manticore_test_log.txt -Append
        echo "Installation directory: $installDir" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        try {
          # Try silent installation with different parameter combinations
          echo "Attempting silent installation..." | Tee-Object -FilePath manticore_test_log.txt -Append
          
          # Common silent install parameters for different installer types
          $installArgs = @(
            "/S",                    # NSIS installer
            "/VERYSILENT",          # Inno Setup
            "/SUPPRESSMSGBOXES",    # Suppress message boxes
            "/NORESTART",           # Don't restart
            "/DIR=$installDir",     # Installation directory
            "/LOG=install_log.txt"  # Log file
          )
          
          echo "Running installer with arguments: $($installArgs -join ' ')" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          $process = Start-Process -FilePath $installerPath -ArgumentList $installArgs -Wait -PassThru -NoNewWindow
          
          echo "Installation process exited with code: $($process.ExitCode)" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          # Check if installation was successful
          if ($process.ExitCode -eq 0) {
            echo "✅ Installation completed successfully" | Tee-Object -FilePath manticore_test_log.txt -Append
          } else {
            echo "⚠️ Installation exited with code $($process.ExitCode)" | Tee-Object -FilePath manticore_test_log.txt -Append
          }
          
          # Check for installation log
          if (Test-Path "install_log.txt") {
            echo "=== Installation Log ===" | Tee-Object -FilePath manticore_test_log.txt -Append
            Get-Content "install_log.txt" | Select-Object -First 50 | Tee-Object -FilePath manticore_test_log.txt -Append
          }
          
        } catch {
          echo "❌ Installation failed: $_" | Tee-Object -FilePath manticore_test_log.txt -Append
          exit 1
        }
      shell: pwsh
    
    - name: Verify Installation
      run: |
        echo "=== VERIFYING INSTALLATION ===" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        # Check common installation paths
        $possiblePaths = @(
          "C:\Manticore",
          "C:\Program Files\Manticore",
          "C:\Program Files (x86)\Manticore",
          "$env:ProgramFiles\Manticore",
          "$env:LOCALAPPDATA\Manticore"
        )
        
        $foundPath = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            echo "✅ Found Manticore installation at: $path" | Tee-Object -FilePath manticore_test_log.txt -Append
            $foundPath = $path
            
            # List installed files
            echo "Installed files:" | Tee-Object -FilePath manticore_test_log.txt -Append
            Get-ChildItem -Path $path -Recurse | Select-Object -First 20 | ForEach-Object {
              echo "  $($_.FullName)" | Tee-Object -FilePath manticore_test_log.txt -Append
            }
            break
          }
        }
        
        if (-not $foundPath) {
          echo "⚠️ Manticore installation directory not found in common locations" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          # Search for searchd.exe
          echo "Searching for searchd.exe..." | Tee-Object -FilePath manticore_test_log.txt -Append
          $searchd = Get-ChildItem -Path "C:\" -Filter "searchd.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($searchd) {
            echo "Found searchd.exe at: $($searchd.FullName)" | Tee-Object -FilePath manticore_test_log.txt -Append
            $foundPath = $searchd.DirectoryName
          }
        }
        
        # Check if searchd.exe exists and try to get version
        if ($foundPath) {
          $searchdPath = Join-Path $foundPath "bin\searchd.exe"
          if (-not (Test-Path $searchdPath)) {
            $searchdPath = Join-Path $foundPath "searchd.exe"
          }
          
          if (Test-Path $searchdPath) {
            echo "Checking Manticore version..." | Tee-Object -FilePath manticore_test_log.txt -Append
            try {
              & $searchdPath --version 2>&1 | Tee-Object -FilePath manticore_test_log.txt -Append
            } catch {
              echo "Could not get version: $_" | Tee-Object -FilePath manticore_test_log.txt -Append
            }
          }
        }
      shell: pwsh
    
    - name: Test Manticore Service
      run: |
        echo "=== TESTING MANTICORE SERVICE ===" | Tee-Object -FilePath manticore_test_log.txt -Append
        
        # Check if Manticore service exists
        $service = Get-Service -Name "*manticore*" -ErrorAction SilentlyContinue
        if ($service) {
          echo "✅ Found Manticore service: $($service.Name)" | Tee-Object -FilePath manticore_test_log.txt -Append
          echo "Service status: $($service.Status)" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          if ($service.Status -ne "Running") {
            echo "Starting Manticore service..." | Tee-Object -FilePath manticore_test_log.txt -Append
            try {
              Start-Service -Name $service.Name
              Start-Sleep -Seconds 5
              $service = Get-Service -Name $service.Name
              echo "Service status after start: $($service.Status)" | Tee-Object -FilePath manticore_test_log.txt -Append
            } catch {
              echo "Failed to start service: $_" | Tee-Object -FilePath manticore_test_log.txt -Append
            }
          }
        } else {
          echo "⚠️ No Manticore service found" | Tee-Object -FilePath manticore_test_log.txt -Append
          
          # Try to run searchd manually
          echo "Attempting to run searchd manually..." | Tee-Object -FilePath manticore_test_log.txt -Append
          # Implementation would go here based on found installation path
        }
        
        # Check if Manticore is listening on default port
        echo "Checking if Manticore is listening on port 9306..." | Tee-Object -FilePath manticore_test_log.txt -Append
        $connection = Test-NetConnection -ComputerName localhost -Port 9306 -WarningAction SilentlyContinue
        if ($connection.TcpTestSucceeded) {
          echo "✅ Manticore is listening on port 9306" | Tee-Object -FilePath manticore_test_log.txt -Append
        } else {
          echo "⚠️ Manticore is not listening on port 9306" | Tee-Object -FilePath manticore_test_log.txt -Append
        }
      shell: pwsh
    
    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: manticore-test-logs
        path: |
          manticore_test_log.txt
          install_log.txt
        retention-days: 7
