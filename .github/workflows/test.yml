download_manticore_windows:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: changes
    name: Download Manticore Windows installer
    runs-on: ubuntu-22.04
    outputs:
      installer_url: ${{ steps.get_installer.outputs.url }}
      installer_name: ${{ steps.get_installer.outputs.name }}
    steps:
      - name: Get latest Manticore installer URL
        id: get_installer
        run: |
          # Parse repository page to extract installer download link
          echo "Fetching installer list from repository..."
          
          # Extract exe file links from HTML page
          INSTALLER_URL=$(curl -s "https://repo.manticoresearch.com/repository/manticoresearch_windows/release/x64/" | \
            grep -oE 'href="[^"]*\.exe"' | \
            grep -E 'manticore-[0-9]+\.[0-9]+\.[0-9]+.*\.exe' | \
            sort -V | \
            tail -1 | \
            sed 's/href="//;s/"//')
          
          if [ -z "$INSTALLER_URL" ]; then
            echo "Could not find installer URL"
            exit 1
          fi
          
          # Prepend base URL if needed
          if [[ "$INSTALLER_URL" != http* ]]; then
            INSTALLER_URL="https://repo.manticoresearch.com/repository/manticoresearch_windows/release/x64/$INSTALLER_URL"
          fi
          
          INSTALLER_NAME=$(basename "$INSTALLER_URL")
          
          echo "url=$INSTALLER_URL" >> $GITHUB_OUTPUT
          echo "name=$INSTALLER_NAME" >> $GITHUB_OUTPUT
          echo "Found installer: $INSTALLER_URL"

  install_test_windows:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Windows installation and basic functionality test
    needs: [download_manticore_windows, changes]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Manticore installer
        shell: powershell
        run: |
          $url = "${{ needs.download_manticore_windows.outputs.installer_url }}"
          $output = "${{ needs.download_manticore_windows.outputs.installer_name }}"
          
          Write-Host "Downloading from: $url"
          Write-Host "Saving as: $output"
          
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
            Write-Host "Downloaded successfully: $output"
            
            # Verify file size
            $fileSize = (Get-Item $output).Length
            Write-Host "File size: $($fileSize / 1MB) MB"
            
            if ($fileSize -lt 1MB) {
              Write-Host "File seems too small, might be corrupted"
              exit 1
            }
          }
          catch {
            Write-Host "Failed to download: $_"
            exit 1
          }
    
      - name: Install Manticore silently
        shell: powershell
        run: |
          $installer = "${{ needs.download_manticore_windows.outputs.installer_name }}"
          
          if (-not (Test-Path $installer)) {
            Write-Host "Installer not found: $installer"
            exit 1
          }
          
          Write-Host "Installing Manticore..."
          try {
            # Run installer in silent mode
            $process = Start-Process -FilePath $installer -ArgumentList '/S', '/D=C:\Manticore' -Wait -PassThru
            
            if ($process.ExitCode -eq 0) {
              Write-Host "Manticore installed successfully"
            } else {
              Write-Host "Installation failed with exit code: $($process.ExitCode)"
              exit 1
            }
          }
          catch {
            Write-Host "Installation error: $_"
            exit 1
          }
    
      - name: Verify installation files
        shell: powershell
        run: |
          $installPaths = @(
            "C:\Manticore\bin\searchd.exe",
            "C:\Program Files\Manticore\bin\searchd.exe",
            "C:\Manticore\bin\indexer.exe",
            "C:\Program Files\Manticore\bin\indexer.exe"
          )
          
          $searchdPath = $null
          $indexerPath = $null
          
          # Locate executables
          foreach ($path in $installPaths) {
            if (Test-Path $path) {
              if ($path -like "*searchd.exe") {
                $searchdPath = $path
                Write-Host "Found searchd at: $path"
              }
              if ($path -like "*indexer.exe") {
                $indexerPath = $path
                Write-Host "Found indexer at: $path"
              }
            }
          }
          
          if (-not $searchdPath) {
            Write-Host "searchd.exe not found in any expected location"
            # Search for searchd.exe recursively
            Write-Host "Searching for searchd.exe in C:\"
            try {
              $found = Get-ChildItem -Path "C:\" -Name "searchd.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) {
                Write-Host "Found searchd.exe at: $found"
              }
            }
            catch {
              Write-Host "Search failed: $_"
            }
            exit 1
          }
          
          if (-not $indexerPath) {
            Write-Host "indexer.exe not found in any expected location"
            exit 1
          }
          
          # Set paths for subsequent steps
          echo "SEARCHD_PATH=$searchdPath" >> $env:GITHUB_ENV
          echo "INDEXER_PATH=$indexerPath" >> $env:GITHUB_ENV
    
      - name: Test binary versions
        shell: powershell
        run: |
          Write-Host "Testing searchd version..."
          try {
            & $env:SEARCHD_PATH --version
            Write-Host "searchd version check passed"
          }
          catch {
            Write-Host "searchd version check failed: $_"
            exit 1
          }
          
          Write-Host "`nTesting indexer version..."
          try {
            & $env:INDEXER_PATH --version
            Write-Host "indexer version check passed"
          }
          catch {
            Write-Host "indexer version check failed: $_"
            exit 1
          }
    
      - name: Test basic searchd functionality
        shell: powershell
        run: |
          # Create working directory
          $workDir = "C:\manticore_test"
          New-Item -ItemType Directory -Force -Path $workDir
          Set-Location $workDir
          
          # Create minimal configuration file
          $configContent = @"
searchd {
    listen = 9312
    listen = 9306:mysql41
    log = searchd.log
    query_log = query.log
    pid_file = searchd.pid
    data_dir = data
    binlog_path = 
}
"@
          $configContent | Out-File -FilePath "manticore.conf" -Encoding UTF8
          
          # Create data directory
          New-Item -ItemType Directory -Force -Path "data"
          
          Write-Host "Starting searchd..."
          try {
            # Start searchd in background
            $searchdProcess = Start-Process -FilePath $env:SEARCHD_PATH -ArgumentList "--config", "manticore.conf", "--console" -NoNewWindow -PassThru
            
            # Wait for startup
            Start-Sleep -Seconds 10
            
            # Check if process is still running
            if ($searchdProcess.HasExited) {
              Write-Host "searchd process exited unexpectedly"
              Write-Host "Exit code: $($searchdProcess.ExitCode)"
              
              # Show logs if available
              if (Test-Path "searchd.log") {
                Write-Host "`nSearchd log:"
                Get-Content "searchd.log"
              }
              exit 1
            }
            
            Write-Host "searchd started successfully (PID: $($searchdProcess.Id))"
            
            # Check if ports are accessible
            $port9312 = Test-NetConnection -ComputerName localhost -Port 9312 -WarningAction SilentlyContinue
            $port9306 = Test-NetConnection -ComputerName localhost -Port 9306 -WarningAction SilentlyContinue
            
            if ($port9312.TcpTestSucceeded) {
              Write-Host "Port 9312 (SphinxAPI) is accessible"
            } else {
              Write-Host "Port 9312 (SphinxAPI) is not accessible"
            }
            
            if ($port9306.TcpTestSucceeded) {
              Write-Host "Port 9306 (MySQL) is accessible"
            } else {
              Write-Host "Port 9306 (MySQL) is not accessible"
            }
            
            # Stop searchd
            Write-Host "Stopping searchd..."
            $searchdProcess | Stop-Process -Force
            Start-Sleep -Seconds 2
            
            Write-Host "Basic searchd functionality test completed"
          }
          catch {
            Write-Host "searchd test failed: $_"
            
            # Show logs if available
            if (Test-Path "searchd.log") {
              Write-Host "`nSearchd log:"
              Get-Content "searchd.log"
            }
            exit 1
          }

      - name: Upload test artifacts
        if: always()
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: windows_installation_test_logs
          path: |
            C:\manticore_test\*.log
            C:\manticore_test\manticore.conf

# Update the existing test_windows job by adding install_test_windows dependency:

  test_windows:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Windows tests
    needs: [build_windows, win_bundle, check_branch, install_test_windows]
    uses: ./.github/workflows/win_test_template.yml
    strategy:
      fail-fast: false
      matrix:
        name: [1_400, 401_650, 651_and_on]
        include:
          - name: 1_400
            start: 1
            end: 400
          - name: 401_650
            start: 401
            end: 650
          - name: 651_and_on
            start: 651
            end: 999999
    with:
      CTEST_START: ${{ matrix.start }}
      CTEST_END: ${{ matrix.end }}
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      artifact_name: windows_test_${{ matrix.name }}
