name: 🔬 Test
run-name: 🔬 Test ${{ github.sha }}

on:
  push:
    branches:
      - master
      - manticore-*
    paths-ignore:
      - 'manual/**'
      - '!manual/References.md'
      - 'cmake/GetGALERA.cmake'
      - 'galera_packaging/**'
  pull_request:
    branches: [ master, update-buddy-version ]
    paths-ignore:
      - 'manual/**'
      - '!manual/References.md'
      - 'cmake/GetGALERA.cmake'
      - 'galera_packaging/**'
    types: [opened, synchronize, reopened, labeled, unlabeled]

# cancels the previous workflow run when a new one appears in the same branch (e.g. master or a PR's branch)
concurrency:
  group: test_${{ github.ref }}
  cancel-in-progress: true

jobs:
  commit_info:
    name: Commit info
    runs-on: ubuntu-22.04
    steps:
      - run: |
          echo "# Automated Tests of commit ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "* Commit URL: [${{ github.sha }}](/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "* Initiated by: [@${{ github.actor }}](https://github.com/${{ github.actor }})" >> $GITHUB_STEP_SUMMARY
          echo "* Ref: ${{ github.ref_type }} \"${{ github.ref_name }}\"" >> $GITHUB_STEP_SUMMARY
          echo "* Attempt: ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY

  check_branch:
    name: Check branch existence
    runs-on: ubuntu-22.04
    outputs:
      columnar_locator: ${{ steps.set_locator.outputs.columnar_locator }}
    steps:
      - name: Check if branch exists in manticoresoftware/columnar
        id: check_branch
        if: github.ref_name != 'master'
        run: |
          # Extract the actual branch name for pull requests
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/manticoresoftware/columnar/branches/$BRANCH_NAME)
          if [ "$HTTP_STATUS" -eq "200" ]; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
      - name: Set Columnar Locator
        id: set_locator
        run: |
          if [[ "${{ github.ref_name }}" != "master" && "${{ steps.check_branch.outputs.branch_exists }}" == "true" ]]; then
            echo "columnar_locator=GIT_REPOSITORY https://github.com/manticoresoftware/columnar.git GIT_TAG ${{ steps.check_branch.outputs.branch_name }}" >> $GITHUB_OUTPUT
          else
            echo "columnar_locator=" >> $GITHUB_OUTPUT
          fi

  changes:
    name: Detect changes in commit
    runs-on: ubuntu-22.04
    outputs:
      source: ${{ steps.filter.outputs.source }}
      test: ${{ steps.filter.outputs.test }}
      clt: ${{ steps.filter.outputs.clt }}
    steps:
      - uses: actions/checkout@v4
      - uses: manticoresoftware/paths-filter@v3
        id: filter
        with:
          filters: |
            source:
            - '**'
            - '!.github/**'
            - '!manual/**'
            - '!doc/**'
            - '!test/**'
            test:
            - 'test/**'
            - '!test/clt-tests/**'
            clt:
            - 'test/clt-tests/**'

  win_bundle:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: changes
    name: Windows supplementary files preparation
    runs-on: ubuntu-22.04
    steps:
      - name: Check out cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            bundle
            boost_1_75_0
          enableCrossOsArchive: true
          key: win_bundle
          lookup-only: true
      - name: Extract Windows bundle from Windows sysroot
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://repo.manticoresearch.com/repository/sysroots/roots_apr15/sysroot_windows_x64.tar.xz
          tar -xvf sysroot_windows_x64.tar.xz
          mv diskc/winbundle bundle
      - name: Extract Boost to put it to the cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://repo.manticoresearch.com/repository/ci/boost_1_75_0.tgz
          tar -xf boost_1_75_0.tgz

  find_manticore_installer:
    name: Find Manticore Windows installer
    runs-on: ubuntu-22.04
    outputs:
      installer_url: ${{ steps.find_url.outputs.installer_url }}
      installer_name: ${{ steps.find_url.outputs.installer_name }}
      version: ${{ steps.find_url.outputs.version }}
    steps:
      - name: Find working installer URL
        id: find_url
        run: |
          echo "Searching for Manticore Windows installer..."
          
          # Список потенциальных URL для проверки
          POTENTIAL_URLS=(
            "https://repo.manticoresearch.com/repository/manticoresearch_windows/release/x64/manticore-13.2.4-25073009-9c37cc067-x64.exe"
            "https://repo.manticoresearch.com/repository/manticoresearch_windows/release/x64/manticore-13.2.3-25070806-bf96368a6-x64.exe"
          )
          
          FOUND_URL=""
          
          for url in "${POTENTIAL_URLS[@]}"; do
            echo "Checking URL: $url"
            
            # Получаем размер файла через HEAD запрос
            size_response=$(curl -sI "$url" 2>/dev/null || true)
            http_code=$(echo "$size_response" | grep -i "^HTTP" | awk '{print $2}' || echo "000")
            content_length=$(echo "$size_response" | grep -i "^content-length:" | awk '{print $2}' | tr -d '\r' || echo "0")
            
            echo "HTTP Code: $http_code, Content-Length: $content_length"
            
            # Проверяем что файл доступен и больше 20MB
            if [ "$http_code" = "200" ] && [ "$content_length" -gt 20971520 ]; then
              echo "Found valid installer: $url (size: $((content_length / 1024 / 1024))MB)"
              FOUND_URL="$url"
              break
            fi
          done
          
          if [ -z "$FOUND_URL" ]; then
            echo "ERROR: No valid installer URL found"
            exit 1
          fi
          
          INSTALLER_NAME=$(basename "$FOUND_URL")
          VERSION=$(echo "$INSTALLER_NAME" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "unknown")
          
          echo "installer_url=$FOUND_URL" >> $GITHUB_OUTPUT
          echo "installer_name=$INSTALLER_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  install_test_windows:
    name: Windows installation and basic functionality test
    needs: [find_manticore_installer]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Display installer information
        shell: powershell
        run: |
          Write-Host "Installer URL: ${{ needs.find_manticore_installer.outputs.installer_url }}"
          Write-Host "Installer Name: ${{ needs.find_manticore_installer.outputs.installer_name }}"
          Write-Host "Version: ${{ needs.find_manticore_installer.outputs.version }}"
        
      - name: Download Manticore installer
        shell: powershell
        run: |
          $url = "${{ needs.find_manticore_installer.outputs.installer_url }}"
          $output = "${{ needs.find_manticore_installer.outputs.installer_name }}"
          
          Write-Host "Downloading from: $url"
          Write-Host "Output file: $output"
          
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
            
            if (Test-Path $output) {
              $fileSize = (Get-Item $output).Length
              $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
              Write-Host "Downloaded file size: $fileSizeMB MB"
              
              if ($fileSize -lt 20MB) {
                Write-Host "ERROR: Downloaded file is too small ($fileSizeMB MB)"
                $bytes = [System.IO.File]::ReadAllBytes($output) | Select-Object -First 10
                $hex = ($bytes | ForEach-Object { $_.ToString("X2") }) -join " "
                Write-Host "File header (hex): $hex"
                exit 1
              }
              
              Write-Host "Download successful - file size looks valid"
            } else {
              Write-Host "ERROR: Downloaded file not found"
              exit 1
            }
          }
          catch {
            Write-Host "Download failed: $_"
            exit 1
          }
    
      - name: Install Manticore silently
        shell: powershell
        run: |
          $installer = "${{ needs.find_manticore_installer.outputs.installer_name }}"
          
          if (-not (Test-Path $installer)) {
            Write-Host "ERROR: Installer not found: $installer"
            exit 1
          }
          
          Write-Host "Installing Manticore..."
          Write-Host "Installer: $installer"
          Write-Host "File size: $([math]::Round((Get-Item $installer).Length / 1MB, 2)) MB"
          
          try {
            $arguments = @('/S')
            $process = Start-Process -FilePath $installer -ArgumentList $arguments -Wait -PassThru
            
            Write-Host "Installation completed with exit code: $($process.ExitCode)"
            
            if ($process.ExitCode -eq 0) {
              Write-Host "Manticore installed successfully"
            } else {
              Write-Host "Installation failed with exit code: $($process.ExitCode)"
              exit 1
            }
          }
          catch {
            Write-Host "Installation error: $_"
            exit 1
          }
    
      - name: Verify installation files
        shell: powershell
        run: |
          $searchPaths = @(
            "C:\Program Files\Manticore",
            "C:\Program Files (x86)\Manticore", 
            "C:\Manticore",
            "C:\Program Files\Manticore Search"
          )
          
          $searchdPath = $null
          $indexerPath = $null
          
          foreach ($basePath in $searchPaths) {
            if (Test-Path $basePath) {
              Write-Host "Found Manticore installation at: $basePath"
              
              $searchdCandidates = @(
                "$basePath\bin\searchd.exe",
                "$basePath\searchd.exe"
              )
              
              $indexerCandidates = @(
                "$basePath\bin\indexer.exe", 
                "$basePath\indexer.exe"
              )
              
              foreach ($candidate in $searchdCandidates) {
                if (Test-Path $candidate) {
                  $searchdPath = $candidate
                  Write-Host "Found searchd at: $candidate"
                  break
                }
              }
              
              foreach ($candidate in $indexerCandidates) {
                if (Test-Path $candidate) {
                  $indexerPath = $candidate
                  Write-Host "Found indexer at: $candidate"
                  break
                }
              }
              
              if ($searchdPath -and $indexerPath) {
                break
              }
            }
          }
          
          if (-not $searchdPath) {
            Write-Host "ERROR: searchd.exe not found in any expected location"
            
            foreach ($basePath in $searchPaths) {
              if (Test-Path $basePath) {
                Write-Host "Contents of $basePath:"
                Get-ChildItem $basePath -Recurse -ErrorAction SilentlyContinue | Select-Object Name, FullName | Format-Table
              }
            }
            exit 1
          }
          
          if (-not $indexerPath) {
            Write-Host "WARNING: indexer.exe not found, but searchd.exe is available"
          }
          
          echo "SEARCHD_PATH=$searchdPath" >> $env:GITHUB_ENV
          if ($indexerPath) {
            echo "INDEXER_PATH=$indexerPath" >> $env:GITHUB_ENV
          }
    
      - name: Test binary versions
        shell: powershell
        run: |
          Write-Host "Testing searchd version..."
          try {
            $output = & $env:SEARCHD_PATH --version 2>&1
            Write-Host "searchd version output:"
            Write-Host $output
            Write-Host "searchd version check passed"
          }
          catch {
            Write-Host "searchd version check failed: $_"
            exit 1
          }
          
          if ($env:INDEXER_PATH) {
            Write-Host "Testing indexer version..."
            try {
              $output = & $env:INDEXER_PATH --version 2>&1
              Write-Host "indexer version output:"
              Write-Host $output
              Write-Host "indexer version check passed"
            }
            catch {
              Write-Host "indexer version check failed: $_"
            }
          } else {
            Write-Host "Skipping indexer test - not found"
          }
    
      - name: Test basic searchd functionality
        shell: powershell
        run: |
          $workDir = "C:\manticore_test"
          New-Item -ItemType Directory -Force -Path $workDir | Out-Null
          Set-Location $workDir
          
          $configContent = @'
          searchd {
              listen = 127.0.0.1:9312
              listen = 127.0.0.1:9306:mysql41
              listen = 127.0.0.1:9308:http
              log = searchd.log
              query_log = query.log
              pid_file = searchd.pid
              data_dir = data
              binlog_path = 
          }
          '@
          $configContent | Out-File -FilePath "manticore.conf" -Encoding UTF8
          
          New-Item -ItemType Directory -Force -Path "data" | Out-Null
          
          Write-Host "Starting searchd for basic functionality test..."
          try {
            $searchdProcess = Start-Process -FilePath $env:SEARCHD_PATH -ArgumentList "--config", "manticore.conf", "--console" -NoNewWindow -PassThru
            
            Write-Host "searchd started with PID: $($searchdProcess.Id)"
            
            Start-Sleep -Seconds 15
            
            if ($searchdProcess.HasExited) {
              Write-Host "ERROR: searchd process exited unexpectedly"
              Write-Host "Exit code: $($searchdProcess.ExitCode)"
              
              if (Test-Path "searchd.log") {
                Write-Host "Searchd log content:"
                Get-Content "searchd.log" -ErrorAction SilentlyContinue
              }
              exit 1
            }
            
            Write-Host "searchd is running successfully"
            
            $ports = @(9312, 9306, 9308)
            foreach ($port in $ports) {
              try {
                $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue
                if ($connection.TcpTestSucceeded) {
                  Write-Host "Port $port is accessible"
                } else {
                  Write-Host "Port $port is not accessible"
                }
              }
              catch {
                Write-Host "Could not test port $port"
              }
            }
            
            Write-Host "Stopping searchd..."
            $searchdProcess | Stop-Process -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 3
            
            Write-Host "Basic searchd functionality test completed successfully"
          }
          catch {
            Write-Host "searchd test failed: $_"
            
            if (Test-Path "searchd.log") {
              Write-Host "Searchd log content:"
              Get-Content "searchd.log" -ErrorAction SilentlyContinue
            }
            exit 1
          }

      - name: Upload test artifacts
        if: always()
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: windows_installation_test_logs
          path: |
            C:\manticore_test\*.log
            C:\manticore_test\manticore.conf

  build_linux_debug:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: [changes, check_branch]
    name: Linux debug build
    uses: ./.github/workflows/build_template.yml
    with:
      CTEST_CONFIGURATION_TYPE: "Debug"
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      artifact_name: debug_build
      cache_key: build_linux_debug_x86_64
      cmake_command: |
        export CMAKE_TOOLCHAIN_FILE=$(pwd)/dist/build_dockers/cross/linux.cmake
        ctest -VV -S misc/ctest/gltest.cmake --no-compress-output

  test_linux_debug:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Linux debug mode tests
    needs: [build_linux_debug, check_branch]
    uses: ./.github/workflows/test_template.yml
    with:
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      build_artifact_name: debug_build
      artifact_name: debug_test_results
      results_name: "Linux debug test results"
      timeout: 10

  build_linux_release:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: [changes, check_branch]
    name: Linux release build
    uses: ./.github/workflows/build_template.yml
    with:
      artifact_name: release_build
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      cache_key: build_linux_release_x86_64
      cmake_command: |
        export CMAKE_TOOLCHAIN_FILE=$(pwd)/dist/build_dockers/cross/linux.cmake
        ctest -VV -S misc/ctest/gltest.cmake --no-compress-output

  test_linux_release:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Linux release mode tests
    needs: [build_linux_release, check_branch]
    uses: ./.github/workflows/test_template.yml
    with:
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      build_artifact_name: release_build
      artifact_name: release_test_results
      results_name: "Linux release test results"
      timeout: 10

  pack_jammy_cache_check:
    needs: changes
    name: Jammy x86_64 package [check cache]
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.generate-key.outputs.cache-key }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate cache key
        id: generate-key
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            branch=${{ github.head_ref }}
          else
            branch=$(git rev-parse --abbrev-ref HEAD)
          fi
          cache_key="jammy-build-${branch}"
          echo "cache-key=${cache_key}" >> $GITHUB_OUTPUT

      - name: Set up cache
        id: cache
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ steps.generate-key.outputs.cache-key }}

      - name: Override cache hit
        id: override-cache-hit
        run: |
          if [ "${{ needs.changes.outputs.source }}" == "true" ]; then
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts from cache
        if: ${{ steps.override-cache-hit.outputs.cache-hit == 'true' }}
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: build_jammy_RelWithDebInfo_x86_64
          path: "build/manticore*deb"

  pack_jammy:
    needs: [pack_jammy_cache_check, changes, check_branch]
    if: |
      needs.pack_jammy_cache_check.outputs.cache-hit != 'true' ||
      needs.changes.outputs.source == 'true'
    name: Jammy x86_64 package [build]
    uses: ./.github/workflows/build_template.yml
    with:
      DISTR: jammy
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      arch: x86_64
      cmake_command: |
        mkdir build
        cd build
        cmake -DPACK=1 ..
        export CMAKE_TOOLCHAIN_FILE=$(pwd)/dist/build_dockers/cross/linux.cmake
        cmake --build . --target package
      cache_key: pack_jammy_x86_64
      artifact_list: "build/manticore*deb"

  pack_jammy_cache_update:
    if: (needs.pack_jammy_cache_check.outputs.cache-hit != 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Jammy x86_64 package [update cache]
    needs: [pack_jammy, pack_jammy_cache_check]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download built x86_64 Ubuntu Jammy packages
        uses: manticoresoftware/download_artifact_with_retries@v3
        continue-on-error: true
        with:
          name: build_jammy_RelWithDebInfo_x86_64
          path: .

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ needs.pack_jammy_cache_check.outputs.cache-key }}

  test_kit_docker_build:
    name: Test Kit docker image
    needs: [pack_jammy, pack_jammy_cache_check]
    if: always() && needs.pack_jammy.result != 'failure'
    runs-on: ubuntu-22.04
    outputs:
      out-build: ${{ steps.build.outputs.build_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download built x86_64 Ubuntu Jammy packages
        uses: manticoresoftware/download_artifact_with_retries@v3
        with:
          name: build_jammy_RelWithDebInfo_x86_64
          path: .
      - name: Calculate short commit hash
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Building docker
        id: build
        run: |
          BUILD_COMMIT=${{ steps.sha.outputs.sha_short }} /bin/bash dist/test_kit_docker_build.sh
          echo "build_image=ghcr.io/$REPO_OWNER/manticoresearch:test-kit-${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT
      - name: Upload docker image artifact
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: manticore_test_kit.img
          path: manticore_test_kit.img

  clt:
    if: always() && needs.test_kit_docker_build.result != 'failure'
    name: CLT
    needs: test_kit_docker_build
    uses: ./.github/workflows/clt_tests.yml
    with:
      docker_image: test-kit:img
      artifact_name: manticore_test_kit.img
      repository: ${{ github.repository }}
      ref: ${{ github.sha }}

  test_kit_docker_push:
    if: always() && needs.changes.outputs.source == 'true'
    needs:
      - changes
      - clt
    name: Push Test Kit docker image to repo
    runs-on: ubuntu-22.04
    env:
      GHCR_USER: ${{ vars.GHCR_USER }}
      GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}
      REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: manticoresoftware/download_artifact_with_retries@main
        with:
          name: manticore_test_kit.img
          path: .
      - name: Calculate short commit hash
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Pushing docker image to repo
        id: test-kit-push
        run: |
          TEST_RESULT=${{ needs.clt.result }} BUILD_COMMIT=${{ steps.sha.outputs.sha_short }} /bin/bash dist/test_kit_docker_push.sh

  build_aarch64:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: [changes, check_branch]
    name: Linux aarch64 build
    uses: ./.github/workflows/build_template.yml
    with:
      arch: aarch64
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      cmake_command: |
        mkdir build
        cd build
        export CMAKE_TOOLCHAIN_FILE=$(pwd)/../dist/build_dockers/cross/linux.cmake
        ctest -V -S ../misc/ctest/justbuild.cmake -DCTEST_SOURCE_DIRECTORY=.. --no-compress-output
      cache_key: build_jammy_aarch64

  build_freebsd:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: [changes, check_branch]
    name: FreeBSD x86_64 build
    uses: ./.github/workflows/build_template.yml
    with:
      DISTR: freebsd13
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      boost_url_key: none
      cmake_command: |
        mkdir build
        cd build
        export CMAKE_TOOLCHAIN_FILE=$(pwd)/../dist/build_dockers/cross/freebsd.cmake
        ctest -VV -S ../misc/ctest/justbuild.cmake -DCTEST_SOURCE_DIRECTORY=.. --no-compress-output
      cache_key: build_freebsd_x86_64

  build_windows:
    if: (needs.changes.outputs.source == 'true') && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    needs: [changes, check_branch]
    name: Windows x64 build
    uses: ./.github/workflows/build_template.yml
    with:
      DISTR: windows
      arch: x64
      sysroot_url_key: roots_mysql83_jan17
      boost_url_key: boost_80
      CTEST_CMAKE_GENERATOR: "Ninja Multi-Config"
      CTEST_CONFIGURATION_TYPE: Debug
      cache_key: build_windows_x64
      artifact_list: "build/xml build/src/Debug/indexer.exe build/src/Debug/indexer.pdb build/src/Debug/searchd.exe build/src/Debug/searchd.pdb build/src/gtests/Debug/gmanticoretest.exe build/src/gtests/Debug/gmanticoretest.pdb build/src/Debug/*.dll build/src/gtests/Debug/*.dll build/config/*.c build/config/*.h"
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}

  test_windows:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'update-buddy-version') != true
    name: Windows tests
    needs: [build_windows, win_bundle, check_branch, install_test_windows]
    uses: ./.github/workflows/win_test_template.yml
    strategy:
      fail-fast: false
      matrix:
        name: [1_400, 401_650, 651_and_on]
        include:
          - name: 1_400
            start: 1
            end: 400
          - name: 401_650
            start: 401
            end: 650
          - name: 651_and_on
            start: 651
            end: 999999
    with:
      CTEST_START: ${{ matrix.start }}
      CTEST_END: ${{ matrix.end }}
      COLUMNAR_LOCATOR: ${{ needs.check_branch.outputs.columnar_locator }}
      artifact_name: windows_test_${{ matrix.name }}

  windows_tests_report:
    name: Windows tests summary and report
    needs: test_windows
    runs-on: ubuntu-22.04
    container:
      image: manticoresearch/ubertests_public:331
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download test report artifacts 1_400
        uses: manticoresoftware/download_artifact_with_retries@v3
        continue-on-error: true
        with:
          name: windows_test_1_400
          path: .
      - name: Download test report artifacts 401_650
        uses: manticoresoftware/download_artifact_with_retries@v3
        continue-on-error: true
        with:
          name: windows_test_401_650
          path: .
      - name: Download test report artifacts 651_and_on
        uses: manticoresoftware/download_artifact_with_retries@v3
        continue-on-error: true
        with:
          name: windows_test_651_and_on
          path: .
      - name: Convert the XML to JUnit format
        run: |
          shopt -s nullglob
          for dir in build/xml_*; do
            if [ -d "$dir" ] && [ -f "$dir/Test.xml" ]; then
              xsltproc -o "$dir/junit_tests.xml" misc/junit/ctest2junit.xsl "$dir/Test.xml"
            fi
          done
        shell: bash
      - name: Publish test results
        uses: manticoresoftware/publish-unit-test-result-action@v2
        with:
          check_name: Windows test results
          compare_to_earlier_commit: false
          files: build/xml_*/junit_tests.xml
          comment_mode: failures
      - name: Per-test results
        run: |
          for file in build/status*; do echo -n "$file: "; cat "$file"; done
          grep -o "success" build/status* | wc -l | awk '{if ($1==3) exit 0; else {print "Found only "$1" successful runs out of 3"; exit 1}}'
        shell: bash
      - name: Upload combined artifacts
        if: always()
        continue-on-error: true
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: windows_test_resuls
          path: build
