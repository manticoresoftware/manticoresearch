name: 'Create Pull Request with deps update'
description: 'This action creates a pull request with updated dependencies'

inputs:
  name:
    description: |-
      Name of the project we are in. 
    required: true
  version:
    description: |-
      Version string to use and update in deps.txt.
    required: true
  token:
    description: |-
      Github token to use for the pull request.
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout the calling repo
      uses: actions/checkout@v4
      env:
        GH_REPOSITORY_REF: ${{ github.head_ref || github.ref }}
      with:
        token: ${{ inputs.token }}
        fetch-depth: 50
        ref: ${{ env.GH_REPOSITORY_REF }}
        path: repository

    - name: Checkout manticoreseach
      uses: actions/checkout@v4
      env:
        GH_ACTION_REPOSITORY: ${{ github.action_repository }}
        GH_ACTION_REF: ${{ github.action_ref }}
      with:
        token: ${{ inputs.token }}
        repository: '${{ env.GH_ACTION_REPOSITORY }}'
        ref: '${{ env.GH_ACTION_REF }}'
        path: 'manticoresearch'

    - name: Set up Git
      shell: bash
      run: |
        cd manticoresearch
        git config user.name githubmanticore 
        git config user.email contact@manticoresearch.com

    - name: Get original commit
      shell: bash
      id: commit
      run: |
        cd manticoresearch
        name=${{ inputs.name }}
        version=$( cat deps.txt | grep "$name" | cut -d' ' -f2 )
        date=$( cat deps.txt | grep "$name" | cut -d' ' -f3 )
        commit=$( cat deps.txt | grep "$name" | cut -d' ' -f4 )
        
        # Extract the semver part (x.y.z) from the original version
        if [[ "$version" == *"+"* ]]; then
          # Handle format like "1.9.1+25021722-22bd3a05-dev"
          semver_original=$(echo "$version" | cut -d'+' -f1)
        else
          # Handle format like "4.1.2" or other formats
          # Extract digits and dots until we hit something else
          semver_original=$(echo "$version" | grep -o '^[0-9][0-9.]*')
        fi
        
        echo "original_version=$version" >> $GITHUB_OUTPUT
        echo "original_date=$date" >> $GITHUB_OUTPUT
        echo "original_commit=$commit" >> $GITHUB_OUTPUT
        echo "semver_original=$semver_original" >> $GITHUB_OUTPUT
        cd ..

    - name: Determine branch and target
      id: branch
      shell: bash
      run: |
        echo "branch=update-${{ inputs.name }}-version" >> $GITHUB_OUTPUT
        echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
        echo "target=master" >> $GITHUB_OUTPUT

    - name: Prepare update version branch
      shell: bash
      run: |
        cd manticoresearch
        #
        # Fetch branch or create it
        git fetch origin
        if ! git ls-remote --exit-code --heads origin ${{ steps.branch.outputs.branch }}; then
          git checkout -b ${{ steps.branch.outputs.branch }} origin/master
        else
          git checkout ${{ steps.branch.outputs.branch }}
        fi

        cd ..

    - name: Check and merge source branch
      if: steps.branch.outputs.source_branch != ''
      shell: bash
      run: |
        cd manticoresearch
        # Check if the source branch exists in current repository
        if git ls-remote --exit-code origin ${{ steps.branch.outputs.source_branch }}; then
          echo "Source branch ${{ steps.branch.outputs.source_branch }} found in current repository"

          git fetch origin ${{ steps.branch.outputs.source_branch }}
          git cherry-pick origin/${{ steps.branch.outputs.source_branch }}
          if [ $? -eq 0 ]; then
            echo "Successfully cherry-picked changes from ${{ steps.branch.outputs.source_branch }}"
            git push -u origin ${{ steps.branch.outputs.branch }}
            git push origin :${{ steps.branch.outputs.source_branch }}
          else
            echo "Cherry-pick failed. Manual intervention required."
            git cherry-pick --abort
            exit 1
          fi
        else
          echo "Source branch ${{ steps.branch.outputs.source_branch }} not found in current repository"
        fi
        cd ..


    - name: Update deps.txt
      id: deps
      shell: bash
      run: |
        cd manticoresearch

        # Update deps
        name=${{ inputs.name }}
        version_string="${{ inputs.version }}"
        
        # Extract the semver part (x.y.z) from the new version
        if [[ "$version_string" == *"+"* ]]; then
          # Handle format like "1.9.1+25021722-22bd3a05-dev"
          semver_new=$(echo "$version_string" | cut -d'+' -f1)
        else
          # Handle format like "4.1.2" or other formats
          # Extract digits and dots until we hit something else
          semver_new=$(echo "$version_string" | grep -o '^[0-9][0-9.]*')
        fi
        
        # Check if semver versions are the same
        if [ "${{ steps.commit.outputs.semver_original }}" = "$semver_new" ]; then
          echo "Semver versions are the same ($semver_new), skipping update"
          echo "version_string=${version_string// /-}" >> $GITHUB_OUTPUT
          echo "semver_new=$semver_new" >> $GITHUB_OUTPUT
          echo "skip_update=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "version_string=${version_string// /-}" >> $GITHUB_OUTPUT
        echo "semver_new=$semver_new" >> $GITHUB_OUTPUT
        sed -i '/^'$name'\s/c\'$name' '"$version_string" deps.txt
        cd ..

    - name: Prepare commit message
      if: steps.deps.outputs.skip_update != 'true'
      id: commit-message
      shell: bash
      run: |
        cd repository
        repo_url=${{ github.server_url }}/${{ github.repository }}
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Using pull request comparison: $base_sha...$head_sha"
          base_sha="${{ github.event.pull_request.base.sha }}"
          head_sha="${{ github.event.pull_request.head.sha }}"
          changes=$(git log --pretty=format:"[\`%h\`]($repo_url/commit/%H) %s" $base_sha...$head_sha)
        else
          echo "Using push event comparison"
          head_sha="${{ github.sha }}"
          # For merge commits, get the actual changes by comparing with parents
          if [[ $(git cat-file -p $head_sha | grep -c "^parent ") -gt 1 ]]; then
            parent_sha=$(git cat-file -p $head_sha | grep "^parent " | tail -n 1 | awk '{print $2}')
            merge_base=$(git merge-base $head_sha^ $parent_sha)
            echo "Merge commit detected, comparing $merge_base...$parent_sha"
            changes=$(git log --pretty=format:"[\`%h\`]($repo_url/commit/%H) %s" $merge_base..$parent_sha)
          else # For regular commits, get the last commit
            echo "Regular commit, showing the latest commit"
            changes=$(git log -1 --pretty=format:"[\`%h\`]($repo_url/commit/%H) %s" $head_sha)
          fi
        fi
        echo "Changes detected:"
        echo "$changes"

        name=${{ inputs.name }}
        version_string="${{ inputs.version }}"
        semver_original="${{ steps.commit.outputs.semver_original }}"
        semver_new="${{ steps.deps.outputs.semver_new }}"
        
        # Updated title to include version change information
        title="ðŸ†• Update ${name} version from ${semver_original} to ${semver_new}"
        commit="Bump ${name} version from ${semver_original} to ${semver_new}"
        body_path=$(mktemp)
        echo "Update [${name}](${repo_url}) version from ${semver_original} to ${semver_new} which includes:" > "$body_path"
        echo >> "$body_path"
        echo "$changes" >> "$body_path"

        echo "title=$title" >> $GITHUB_OUTPUT
        echo "commit=$commit" >> $GITHUB_OUTPUT
        echo "body-path=$body_path" >> $GITHUB_OUTPUT
        echo "branch=${{ steps.branch.outputs.branch }}" >> $GITHUB_OUTPUT

    - name: Create or update Pull Request
      if: steps.deps.outputs.skip_update != 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GH_TOKEN: ${{ inputs.token }}
        GH_DEBUG: true
        OWNER: ${{ github.repository_owner }}
        REPO: manticoresearch
      run: |
        cd manticoresearch

        gh auth status --show-token

        if ! git diff --exit-code deps.txt> /dev/null 2>&1; then
          git add deps.txt
          git commit -m "${{ steps.commit-message.outputs.commit }}"
          git push -u origin ${{ steps.branch.outputs.branch }}
        fi

        pr_number=$(gh pr list --head ${{ steps.branch.outputs.branch }} --json number --jq '.[0].number')
        if [ -z "$pr_number" ]; then
          gh pr create --base ${{ steps.branch.outputs.target }} --head ${{ steps.branch.outputs.branch }} \
            --title "${{ steps.commit-message.outputs.title }}" \
            --body-file "${{ steps.commit-message.outputs.body-path }}"
        else
          gh pr edit "$pr_number" \
            --repo "$OWNER/$REPO" \
            --title "${{ steps.commit-message.outputs.title }}" \
            --body-file "${{ steps.commit-message.outputs.body-path }}"
        fi
        cd ..

