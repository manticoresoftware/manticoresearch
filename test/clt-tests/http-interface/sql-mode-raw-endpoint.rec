––– block: ../base/start-searchd-with-buddy –––
––– input –––
apt-get install jq -y > /dev/null; echo $?
––– output –––
debconf: delaying package configuration, since apt-utils is not installed
0
––– input –––
mysql -h0 -P9306 -e "CREATE TABLE t (id INT, value TEXT, value_attr STRING) min_infix_len = '3' min_prefix_len = '3'; INSERT INTO t VALUES (1, 'example', 'example'), (2, 'test', 'test');"
––– output –––
––– comment –––
Test SHOW VERSION command
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "show version" | jq '.[0].data'
––– output –––
[
  {
    "Component": "Daemon",
    "Version": "%{VERSION}"
  },
  {
    "Component": "Columnar",
    "Version": "columnar %{VERSION}"
  },
  {
    "Component": "Secondary",
    "Version": "secondary %{VERSION}"
  },
  {
    "Component": "Knn",
    "Version": "knn %{VERSION}"
  },
  {
    "Component": "Embeddings",
    "Version": "embeddings %{VERSION}"
  },
  {
    "Component": "Buddy",
    "Version": "buddy %{VERSION}"
  }
]
––– comment –––
Test SHOW BUDDY PLUGINS command
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "show buddy plugins" | jq '.[0].data | .[0:3] | .[] | {Plugin, Type, Info}'
––– output –––
{
  "Plugin": "empty-string",
  "Type": "core",
  "Info": "Handles empty queries, which can occur when trimming comments or dealing with specific SQL protocol instructions in comments that are not supported"
}
{
  "Plugin": "backup",
  "Type": "core",
  "Info": "BACKUP sql statement"
}
{
  "Plugin": "emulate-elastic",
  "Type": "core",
  "Info": "Emulates some Elastic queries and generates responses as if they were made by ES"
}
––– comment –––
Test SELECT with fuzzy search
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "select * from t where match('exmaple') option fuzzy=1" | jq '.[0].data'
––– output –––
[
  {
    "id": 1,
    "value": "example",
    "value_attr": "example"
  }
]
––– comment –––
Test SHOW FIELDS command
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "show fields from t" | jq '.[0].data'
––– output –––
[
  {
    "Field": "id",
    "Type": "bigint",
    "Null": "NO",
    "Key": "",
    "Default": "",
    "Extra": ""
  },
  {
    "Field": "value",
    "Type": "text",
    "Null": "NO",
    "Key": "",
    "Default": "",
    "Extra": ""
  },
  {
    "Field": "value_attr",
    "Type": "string",
    "Null": "NO",
    "Key": "",
    "Default": "",
    "Extra": ""
  }
]
––– comment –––
Test CREATE TABLE LIKE command
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "create table t_copy like t" | jq '.[0] | {total, error, warning}'
––– output –––
{
  "total": 0,
  "error": "",
  "warning": ""
}
––– comment –––
Test SHOW FULL TABLES command
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "show full tables" | jq '.[0].data'
––– output –––
[
  {
    "Tables_in_Manticore": "t",
    "Table_type": "BASE TABLE"
  },
  {
    "Tables_in_Manticore": "t_copy",
    "Table_type": "BASE TABLE"
  }
]
––– comment –––
Test SELECT query
––– input –––
curl -s -X POST "http://localhost:9308/sql?mode=raw" -d "select * from t limit 1" | jq '.[0].data'
––– output –––
[
  {
    "id": 1,
    "value": "example",
    "value_attr": "example"
  }
]
––– comment –––
Test GET method
––– input –––
curl -s "http://localhost:9308/sql?mode=raw&query=select%20count(*)%20from%20t" | jq '.[0].data'
––– output –––
[
  {
    "count(*)": 2
  }
]
