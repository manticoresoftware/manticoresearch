––– block: ../../base/dind/init –––
––– comment –––
Kafka Integration Version Test with Version Management
VERSIONS=("3.7.0" "3.7.1" "3.8.0" "3.8.1" "4.0.0" "4.0.1" "4.1.0")
––– input –––
# Install curl for Docker Hub checks
apt-get update > /dev/null 2>&1 && apt-get install -y curl jq > /dev/null 2>&1
––– output –––
––– input –––
# Source version check script for functions
source ./test/clt-tests/integrations/kafka/script_versions_kafka.sh
––– output –––
––– input –––
echo "STEP 1: Version Management Check"
echo ""
––– output –––
STEP 1: Version Management Check
––– input –––
echo "1️⃣  Checking Docker Hub for new Kafka versions..."
kafka_versions=$(curl -s "https://hub.docker.com/v2/repositories/apache/kafka/tags/?page_size=100" 2>/dev/null | \
    grep -o '"name":"[0-9]*\.[0-9]*\.[0-9]*"' | grep -o '[0-9]*\.[0-9]*\.[0-9]*' | \
    grep -v -E '(rc|RC|alpha|beta|Alpha|Beta|ALPHA|BETA)' | sort -u -V)
echo "   ✅ Docker Hub check complete"
echo ""
––– output –––
1️⃣  Checking Docker Hub for new Kafka versions...
   ✅ Docker Hub check complete
––– input –––
echo "2️⃣  Validating documentation..."
DOC_FILE="/manual/english/Integration/Kafka.md"
if [ -f "$DOC_FILE" ]; then
    DOC_RANGE=$(grep -oE "[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+" "$DOC_FILE" | head -1)
    echo "   ✅ Range: $DOC_RANGE"
else
    echo "   ⚠️  File not found"
fi
echo ""
––– output –––
2️⃣  Validating documentation...
   ✅ Range: 3.7.0-4.1.0
––– input –––
echo "3️⃣  Validating test coverage..."
MATRIX_TEST_FILE="./test/clt-tests/integrations/kafka/test-integration-kafka-version.rec"
if [ -f "$MATRIX_TEST_FILE" ]; then
    MATRIX_RAW=$(grep 'VERSIONS=(' "$MATRIX_TEST_FILE" 2>/dev/null | head -1)
    MATRIX_COUNT=$(echo "$MATRIX_RAW" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | wc -l)
    echo "   ✅ Coverage: $MATRIX_COUNT versions"
else
    echo "   ⚠️  File not found"
fi
echo ""
echo "✅ All version checks passed"
echo ""
––– output –––
3️⃣  Validating test coverage...
   ✅ Coverage: 7 versions
✅ All version checks passed
––– input –––
# Get versions from script
VERSIONS=("3.7.0" "3.7.1" "3.8.0" "3.8.1" "4.0.0" "4.0.1" "4.1.0")
PASSED=0
FAILED=0

echo "STEP 2: Kafka Integration Tests"
echo "Testing versions:"
for VERSION in "${VERSIONS[@]}"; do
    echo "  - $VERSION"
done
echo ""
––– output –––
STEP 2: Kafka Integration Tests
Testing versions:
  - 3.7.0
  - 3.7.1
  - 3.8.0
  - 3.8.1
  - 4.0.0
  - 4.0.1
  - 4.1.0
––– input –––
echo "Preparing images..."
docker pull -q ghcr.io/manticoresoftware/manticoresearch:test-kit-latest >/dev/null 2>&1
for VERSION in "${VERSIONS[@]}"; do
    docker pull -q apache/kafka:$VERSION >/dev/null 2>&1
done
echo "✓ Images ready"
echo ""
––– output –––
Preparing images...
✓ Images ready
––– input –––
for VERSION in "${VERSIONS[@]}"; do
    echo "→ Testing Kafka $VERSION"

    # Cleanup
    docker rm -f mtest ktest >/dev/null 2>&1 || true
    docker network rm test-net >/dev/null 2>&1 || true
    docker network create test-net --driver bridge >/dev/null 2>&1

    # Start Manticore
    docker run -d --network=test-net --name mtest \
        ghcr.io/manticoresoftware/manticoresearch:test-kit-latest \
        sleep infinity >/dev/null 2>&1
    docker exec -d mtest searchd --logdebugvv >/dev/null 2>&1
    sleep 2

    # Wait Manticore using script function
    if ! wait_manticore_ready mtest 40 1; then
        echo "  ✗ Manticore failed"
        FAILED=$((FAILED + 1))
        continue
    fi

    # Start Kafka
    docker run -d --network=test-net --name ktest \
        -e KAFKA_NODE_ID=1 \
        -e KAFKA_PROCESS_ROLES=broker,controller \
        -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093 \
        -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://ktest:9092 \
        -e KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER \
        -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \
        -e KAFKA_CONTROLLER_QUORUM_VOTERS=1@ktest:9093 \
        -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
        -e KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0 \
        apache/kafka:$VERSION >/dev/null 2>&1
    sleep 5

    # Wait Kafka using script function
    if ! wait_kafka_ready ktest 60 3; then
        echo "  ✗ Kafka failed"
        FAILED=$((FAILED + 1))
        docker rm -f mtest ktest >/dev/null 2>&1 || true
        docker network rm test-net >/dev/null 2>&1 || true
        continue
    fi

    sleep 3
    SQL_VERSION=$(echo $VERSION | tr '.' '_')

    # Create topic using script function
    if ! create_kafka_topic ktest "test-$VERSION" 1; then
        echo "  ✗ Topic failed"
        FAILED=$((FAILED + 1))
        docker rm -f mtest ktest >/dev/null 2>&1 || true
        docker network rm test-net >/dev/null 2>&1 || true
        continue
    fi
    sleep 2

    # Create source
    if ! docker exec mtest mysql -h0 -P9306 -e \
        "CREATE SOURCE s_$SQL_VERSION (id bigint, term text) \
         type='kafka' broker_list='ktest:9092' topic_list='test-$VERSION' \
         consumer_group='g_$SQL_VERSION' num_consumers='1' batch=10;" >/dev/null 2>&1; then
        echo "  ✗ Source failed"
        FAILED=$((FAILED + 1))
        docker rm -f mtest ktest >/dev/null 2>&1 || true
        docker network rm test-net >/dev/null 2>&1 || true
        continue
    fi

    # Create table & MV
    docker exec mtest mysql -h0 -P9306 -e \
        "CREATE TABLE d_$SQL_VERSION (id bigint, name text);" >/dev/null 2>&1
    docker exec mtest mysql -h0 -P9306 -e \
        "CREATE MATERIALIZED VIEW v_$SQL_VERSION TO d_$SQL_VERSION \
         AS SELECT id, term as name FROM s_$SQL_VERSION;" >/dev/null 2>&1

    # Send data
    for i in 1 2 3; do
        echo "{\"id\":$i,\"term\":\"test$i\"}" | \
        docker exec -i ktest /opt/kafka/bin/kafka-console-producer.sh \
            --bootstrap-server localhost:9092 --topic test-$VERSION >/dev/null 2>&1
    done

    # Verify
    sleep 15
    COUNT=$(docker exec mtest mysql -h0 -P9306 -N -e \
        "SELECT COUNT(*) FROM d_$SQL_VERSION" 2>/dev/null | tr -cd '0-9')

    if [ "$COUNT" = "3" ]; then
        echo "  ✓ PASS ($COUNT records)"
        PASSED=$((PASSED + 1))
    else
        echo "  ✗ FAIL (expected 3, got $COUNT)"
        FAILED=$((FAILED + 1))
    fi

    # Cleanup
    docker rm -f mtest ktest >/dev/null 2>&1 || true
    docker network rm test-net >/dev/null 2>&1 || true
done
––– output –––
→ Testing Kafka 3.7.0
  ✓ PASS (3 records)
→ Testing Kafka 3.7.1
  ✓ PASS (3 records)
→ Testing Kafka 3.8.0
  ✓ PASS (3 records)
→ Testing Kafka 3.8.1
  ✓ PASS (3 records)
→ Testing Kafka 4.0.0
  ✓ PASS (3 records)
→ Testing Kafka 4.0.1
  ✓ PASS (3 records)
→ Testing Kafka 4.1.0
  ✓ PASS (3 records)
––– input –––
echo ""
echo "RESULTS"
echo "Versions tested: ${#VERSIONS[@]}"
echo "Integration tests passed: $PASSED"
echo "Integration tests failed: $FAILED"
echo ""
if [ $FAILED -eq 0 ]; then
    echo "✅ ALL INTEGRATION TESTS PASSED"
else
    echo "❌ SOME INTEGRATION TESTS FAILED"
fi
––– output –––
RESULTS
Versions tested: 7
Integration tests passed: 7
Integration tests failed: 0
✅ ALL INTEGRATION TESTS PASSED
