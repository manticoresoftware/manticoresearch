––– comment –––
Start Manticore Search with buddy
––– block: ../base/start-searchd-with-buddy –––
––– comment –––
Create table with auto-embeddings
––– input –––
mysql -h0 -P9306 -e "CREATE TABLE test_backup (
    title TEXT,
    content TEXT,
    status INTEGER,
    vec FLOAT_VECTOR KNN_TYPE='hnsw' HNSW_SIMILARITY='l2'
    MODEL_NAME='sentence-transformers/all-MiniLM-L6-v2'
    FROM='title, content'
) engine='columnar'"; echo $?
––– output –––
0
––– comment –––
Insert test data
––– input –––
mysql -h0 -P9306 -e "INSERT INTO test_backup (id, title, content, status) VALUES
    (1, 'machine learning', 'neural networks', 1),
    (2, 'deep learning', 'transformers', 1),
    (3, 'computer vision', 'image processing', 2)"; echo $?
––– output –––
0
––– comment –––
Optimize for KNN
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK test_backup; OPTIMIZE TABLE test_backup OPTION sync=1, cutoff=1"; echo $?
––– output –––
0
––– comment –––
Verify KNN works before backup
––– input –––
mysql -h0 -P9306 -e "SELECT id FROM test_backup WHERE KNN(vec, 2, 'artificial intelligence')"
––– output –––
+------+
| id   |
+------+
|    1 |
|    3 |
+------+
––– comment –––
Check manticore-backup is available
––– input –––
manticore-backup --version | grep -c "Manticore Backup"
––– output –––
1
––– comment –––
Create backup using manticore-backup tool
––– input –––
mkdir -p /tmp/backup && chmod 777 /tmp/backup; echo $?
––– output –––
0
––– input –––
manticore-backup --backup-dir=/tmp/backup --tables=test_backup 2>&1 | grep -c "Backing up table"
––– output –––
1
––– comment –––
Check backup was created
––– input –––
ls -d /tmp/backup/backup-* | wc -l
––– output –––
1
––– comment –––
Test FREEZE/UNFREEZE for online backup
––– input –––
mysql -h0 -P9306 -e "FREEZE test_backup" | grep -c "test_backup"
––– output –––
14
––– comment –––
Insert while frozen
––– input –––
mysql -h0 -P9306 -e "INSERT INTO test_backup (id, title, content, status) VALUES (4, 'frozen insert', 'test data', 3)"; echo $?
––– output –––
0
––– comment –––
UNFREEZE
––– input –––
mysql -h0 -P9306 -e "UNFREEZE test_backup"; echo $?
––– output –––
0
––– comment –––
Verify data including frozen insert
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM test_backup"
––– output –––
+----------+
| count(*) |
+----------+
|        4 |
+----------+
––– comment –––
Test mysqldump for logical backup
––– input –––
mysqldump -h0 -P9306 manticore test_backup > /tmp/logical_backup.sql 2>/dev/null; echo $?
––– output –––
0
––– comment –––
Check mysqldump created file with batch insert
––– input –––
grep -c "INSERT INTO" /tmp/logical_backup.sql
––– output –––
1
––– comment –––
Stop searchd before restore
––– input –––
searchd --stopwait > /dev/null 2>&1; echo $?
––– output –––
0
––– comment –––
Remove existing config and data for clean restore
––– input –––
rm -f /etc/manticoresearch/manticore.conf; rm -rf /var/lib/manticore/*; echo "Cleaned for restore"
––– output –––
Cleaned for restore
––– comment –––
List available backups
––– input –––
manticore-backup --backup-dir=/tmp/backup --restore 2>&1 | grep -c "backup-"
––– output –––
1
––– comment –––
Restore from backup (now should work with clean system)
––– input –––
BACKUP_NAME=$(manticore-backup --backup-dir=/tmp/backup --restore 2>&1 | grep backup- | awk '{print $1}' | head -1)
manticore-backup --backup-dir=/tmp/backup --restore=$BACKUP_NAME 2>&1 | grep -c "Starting to restore"
––– output –––
1
––– comment –––
Start searchd after restore
––– input –––
searchd > /dev/null 2>&1; echo $?
––– output –––
0
––– input –––
echo "Waiting for searchd to start"; sleep 3
––– output –––
Waiting for searchd to start
––– comment –––
Verify restored data (includes frozen insert as it was backed up)
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM test_backup"
––– output –––
+----------+
| count(*) |
+----------+
|        3 |
+----------+
––– comment –––
Verify vectors restored correctly
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK test_backup; OPTIMIZE TABLE test_backup OPTION sync=1, cutoff=1"; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "SELECT id FROM test_backup WHERE KNN(vec, 2, 'artificial intelligence')"
––– output –––
+------+
| id   |
+------+
|    1 |
|    3 |
+------+
––– comment –––
Test ALTER TABLE after restore
––– input –––
mysql -h0 -P9306 -e "ALTER TABLE test_backup ADD COLUMN new_field INTEGER"; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "DESC test_backup" | grep "new_field"
––– output –––
| new_field | uint         | columnar fast_fetch     |
––– comment –––
Test creating new table for manual data copy
––– input –––
mysql -h0 -P9306 -e "CREATE TABLE test_copy (
    title TEXT,
    content TEXT,
    status INTEGER,
    vec FLOAT_VECTOR KNN_TYPE='hnsw' HNSW_SIMILARITY='l2'
    MODEL_NAME='sentence-transformers/all-MiniLM-L6-v2'
    FROM='title, content'
) engine='columnar'"; echo $?
––– output –––
0
––– comment –––
Manual copy of data (since mysqldump restore may have issues with vectors)
––– input –––
mysql -h0 -P9306 -e "INSERT INTO test_copy (id, title, content, status) VALUES
    (1, 'machine learning', 'neural networks', 1),
    (2, 'deep learning', 'transformers', 1),
    (3, 'computer vision', 'image processing', 2),
    (4, 'frozen insert', 'test data', 3)"; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM test_copy"
––– output –––
+----------+
| count(*) |
+----------+
|        4 |
+----------+
––– comment –––
Verify vectors regenerated in copied table
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK test_copy; OPTIMIZE TABLE test_copy OPTION sync=1, cutoff=1"; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "SELECT id FROM test_copy WHERE KNN(vec, 2, 'artificial intelligence')"
––– output –––
+------+
| id   |
+------+
|    1 |
|    3 |
+------+
