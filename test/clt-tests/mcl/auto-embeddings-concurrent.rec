Test concurrent operations with accurate file-based error counting
––– comment –––
Start Manticore with Buddy
––– input –––
rm -f /var/log/manticore/searchd.log; stdbuf -oL searchd $SEARCHD_FLAGS > /dev/null; if timeout 10 grep -qm1 '\[BUDDY\] started' <(tail -n 1000 -f /var/log/manticore/searchd.log); then echo 'Buddy started!'; else echo 'Timeout or failed!'; cat /var/log/manticore/searchd.log;fi
––– output –––
Buddy started!
––– comment –––
Create table with auto-embeddings
––– input –––
mysql -h0 -P9306 -e "CREATE TABLE test_concurrent (
    title TEXT,
    status INTEGER,
    vec FLOAT_VECTOR KNN_TYPE='hnsw' HNSW_SIMILARITY='l2'
    MODEL_NAME='sentence-transformers/all-MiniLM-L6-v2'
    FROM='title'
) engine='columnar'"; echo $?
––– output –––
0
––– comment –––
Insert initial data
––– input –––
for i in {1..20}; do
    mysql -h0 -P9306 -e "INSERT INTO test_concurrent (id, title, status) VALUES ($i, 'Document $i', 0)" 2>/dev/null
done
echo "Initial insert completed"
––– output –––
Initial insert completed
––– comment –––
Optimize table
––– input –––
mysql -h0 -P9306 -e "FLUSH RAMCHUNK test_concurrent; OPTIMIZE TABLE test_concurrent OPTION sync=1, cutoff=1"; echo $?
––– output –––
0
––– comment –––
Concurrent operations
––– input –––
for i in {21..30}; do
    mysql -h0 -P9306 -e "INSERT INTO test_concurrent (id, title, status) VALUES ($i, 'New doc $i', 1)" 2>/dev/null &
done
for i in {1..5}; do
    mysql -h0 -P9306 -e "DELETE FROM test_concurrent WHERE id = $i" 2>/dev/null &
done
for i in {6..10}; do
    mysql -h0 -P9306 -e "REPLACE INTO test_concurrent (id, title, status) VALUES ($i, 'Replaced doc $i', 2)" 2>/dev/null &
done
wait
mysql -h0 -P9306 -e "SELECT COUNT(*) as total FROM test_concurrent"
––– output –––
+-------+
| total |
+-------+
|    25 |
+-------+
––– comment –––
Race condition test with exact file counting
––– input –––
rm -f /tmp/race_test.err
for i in {1..10}; do
    (mysql -h0 -P9306 -e "INSERT INTO test_concurrent (id, title, status) VALUES (999, 'Race $i', $i)" 2>>/tmp/race_test.err) &
done
wait
––– output –––
––– comment –––
Show exact error count from file
––– input –––
wc -l /tmp/race_test.err | awk '{print $1 " error lines in file"}'
––– output –––
0 error lines in file
––– comment –––
Count duplicate id errors specifically
––– input –––
grep -c "duplicate id" /tmp/race_test.err
––– output –––
0
––– comment –––
Check final state
––– input –––
mysql -h0 -P9306 -e "SELECT COUNT(*) FROM test_concurrent WHERE id = 999"
––– output –––
+----------+
| count(*) |
+----------+
|        1 |
+----------+
––– comment –––
Test REPLACE with vectors (UPDATE doesn't work for TEXT fields)
––– input –––
for i in {11..15}; do
    mysql -h0 -P9306 -e "REPLACE INTO test_concurrent (id, title, status) VALUES ($i, 'Updated doc $i', 3)" 2>/dev/null &
done
wait
mysql -h0 -P9306 -e "FLUSH RAMCHUNK test_concurrent; OPTIMIZE TABLE test_concurrent OPTION sync=1, cutoff=1"; echo $?
––– output –––
0
––– input –––
mysql -h0 -P9306 -e "SELECT id FROM test_concurrent WHERE KNN(vec, 5, 'Updated doc') ORDER BY id LIMIT 5"
––– output –––
+------+
| id   |
+------+
|   13 |
|   11 |
|   12 |
|   14 |
|   15 |
+------+
––– comment –––
Multiple tests with file output
––– input –––
for test_num in {1..3}; do
    rm -f /tmp/test${test_num}.err
    mysql -h0 -P9306 -e "CREATE TABLE race$test_num (title TEXT)" 2>/dev/null
    for i in {1..10}; do
        (stdbuf -oL mysql -h0 -P9306 -e "INSERT INTO race$test_num (id, title) VALUES (888, 'test')" 2>>/tmp/test${test_num}.err) &
    done
    wait
    echo "Test $test_num: $(wc -l /tmp/test${test_num}.err | awk '{print $1}') lines, $(grep -c 'duplicate' /tmp/test${test_num}.err) duplicate errors"
done
––– output –––
Test 1: 9 lines, 9 duplicate errors
Test 2: 9 lines, 9 duplicate errors
Test 3: 9 lines, 9 duplicate errors
