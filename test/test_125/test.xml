<?xml version="1.0" encoding="utf-8"?>
<test>
<name>select expressions, functions, operators</name> <!-- all the misc tests -->
<requires><sphinxql_keep_null/></requires>

<config>
indexer
{
	mem_limit = 16M
}

searchd
{
	<searchd_settings/>
	thread_stack = 1200K
	server_id = 100
}

source test
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT *, '1,2,3,4,5,6.0' AS poly2d_attr FROM test_table
	sql_attr_uint = aa
	sql_attr_multi = uint mm from field
	sql_attr_string = kk
	sql_attr_float = f1
	sql_attr_float = f2
	sql_attr_string = poly2d_attr
}

index test
{
	source	= test
	path	= <data_path/>/test
}

source cmp
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT * FROM cmp_table
	sql_attr_multi = uint mva32 from field
	sql_attr_multi = bigint mva64 from field
	sql_attr_float = f1
	sql_attr_uint = gid
}
index cmp
{
	source	= cmp
	path	= <data_path/>/cmp
}

source cmp2
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT * FROM cmp_table
	sql_attr_uint = f1
	sql_attr_uint = gid
}
index cmp2
{
	source	= cmp2
	path	= <data_path/>/cmp2
}

source strings
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT *, 'dummy' FROM string_table
	sql_attr_string = string_value
}

index strings
{
	source	= strings
	path	= <data_path/>/strings
}

index dist
{
	type = distributed
	agent = <my_address/>:test
	agent_connect_timeout	= 1000
	agent_query_timeout		= 3000	
}

index strings_dist
{
	type = distributed
	agent = <my_address/>:strings
}

source test1
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT id, 11 as idd, string_value FROM string_table1
	sql_attr_uint = idd
	sql_field_string = string_value
}

index test1
{
	source	= test1
	path	= <data_path/>/test1
}

index test1_loc
{
	type = distributed
	local = test1
}

index test1_dist
{
	type = distributed
	agent = <my_address/>:test1
}

source test_json
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from json_src_table
	sql_attr_uint	= gid
	sql_attr_json	= j
}

index test_json
{
	source			= test_json
	path			= <data_path/>/test_json
}

source test_name
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from name_table
	sql_attr_uint	= 123_attr1
	sql_attr_uint	= 10000attr2
}

index test_name
{
	source			= test_name
	path			= <data_path/>/test_name
}
</config>

<db_create>
CREATE TABLE test_table
(
	id INT NOT NULL,
	aa INT NOT NULL,
	title VARCHAR(255) NOT NULL,
	mm VARCHAR(255) NOT NULL,
	kk VARCHAR(255) NOT NULL,
	f1 FLOAT NOT NULL,
	f2 FLOAT NOT NULL
);
</db_create>

<db_create>
CREATE TABLE cmp_table
(
	id INT NOT NULL,
	title VARCHAR(255) NOT NULL,
	mva32 VARCHAR(255) NOT NULL,
	mva64 VARCHAR(255) NOT NULL,
	f1 FLOAT NOT NULL,
	gid INT NOT NULL
);
</db_create>

<db_create>
CREATE TABLE string_table
(
	id INT NOT NULL,
	string_value VARCHAR(255) NOT NULL
);
</db_create>

<db_create>
CREATE TABLE string_table1
(
	id INT NOT NULL,
	string_value VARCHAR(255) NOT NULL
);
</db_create>
<db_create>
CREATE TABLE json_src_table (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `gid` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `j` varchar(8192) NOT NULL,
  PRIMARY KEY (`id`)
);
</db_create>
<db_create>
CREATE TABLE name_table (
  `id` int(11),
  `title` varchar(255),
  `123_attr1` int(11),
  `10000attr2` int(11)
);
</db_create>

<db_drop>DROP TABLE IF EXISTS test_table;</db_drop>
<db_drop>DROP TABLE IF EXISTS cmp_table;</db_drop>
<db_drop>DROP TABLE IF EXISTS string_table;</db_drop>
<db_drop>DROP TABLE IF EXISTS string_table1;</db_drop>
<db_drop>DROP TABLE IF EXISTS json_src_table;</db_drop>
<db_drop>DROP TABLE IF EXISTS name_table;</db_drop>

<db_insert>
INSERT INTO test_table ( id, aa, title, mm, kk, f1, f2 ) VALUES
( 1, 2, 'dummy', '', 'one', 0, 0 ),
( 10, 3, 'ohai', '7 40', 'ten', 0, 0 ),
( 11, 4, 'ohai2', '', 'eleventy', 0.123123, 0.456789 ),
( 21, 5, 'Orchard Terrace', '', 'Omagh', 0.9528931356546767,-0.12749577825941016 )
</db_insert>

<db_insert>
INSERT INTO cmp_table VALUES
( 1, 'dummy', '101, 107, 102', '-100, -50, 20, 70', 1.2, 10 ),
( 2, 'dummy', '201, 220, 210', '-200, -350 ', 21.2, 20 ),
( 3, 'dummy', '310, 330, 301', '-300, -350, 320', 31.3, 33 ),
( 4, 'dummy', '900, 400, 601', '1000, 500, 401', 101.2, 110 )
</db_insert>

<db_insert>
INSERT INTO string_table VALUES
(1, 'asdf'),
(2, 'ASDF'),
(3, 'qwer'),
(4, '')
</db_insert>

<db_insert>
INSERT INTO string_table1 VALUES
(1, 'as\'df'),
(2, 'ASDF'),
(3, 'as df'),
(4, '')
</db_insert>

<db_insert>
INSERT INTO json_src_table VALUES
(1,1,'test one','{"name":"Alice","uid":123, "lon":-0.0798578, "lat":0.937717, "pct":12.4, "sq":9, "poly":"1,2,3,4,5,6.0", "points":[1,2,3,4,5,6.0]}'),
(2,1,'test two','{"name":"Bob","uid":234,"gid":12, "lon":-0.0799989, "lat":0.891975, "pct":-103.7, "sq":16, "poly":"1,-2,1,2,-5,6", "points":[1,-2,1,2,-5,6]}'),
(3,2,'another doc','{"name":"Charlie","uid":345, "lon":-0.0721455, "lat":0.926761, "pct":4.1, "sq":225, "poly":"-1,2,12,4,5,6", "points":[-1,2,12,4,5,6]}')
</db_insert>

<db_insert>
INSERT INTO name_table VALUES
(1,'test one',100,1000),
(2,'test two',200,2000)
</db_insert>

<query_attributes>
	<attr>aa</attr>
	<attr>sel</attr>
</query_attributes>

<queries>
	<query select="aa div 2 as sel, *" index="test"/>
	<query select="aa / 2 as sel, *" index="test"/>
	<query select="aa mod 2 as sel, *" index="test"/>
	<query select="aa % 2 as sel, *" index="test"/>
</queries>
	

<sphqueries>
<sphinxql>
	<!-- test boolean operator precedence -->
	SELECT 0 AND 0 OR 1 AS a, 0 AND 1 OR 1 AS b, 1 OR 0 AND 0 AS c, 1 OR 1 AND 0 AS d FROM test WHERE id=1

	<!-- test common ariphmetic -->
	SELECT id, aa div 2 as sel from test;
	SELECT id, aa / 2 as sel from test;
	SELECT id, aa mod 2 as sel from test;
	SELECT id, aa % 2 as sel from test;

	<!-- long floats -->
	select f1, f2 FROM test where id=21

	<!-- test argument type check -->
	SELECT id, CRC32('test') FROM test WHERE id=10;
	SELECT id, ABS(CRC32('test')) FROM test WHERE id=10;
	SELECT id, IF(IN(mm,7),111,222) FROM test;
	SELECT IN(aa-(aa-15), 15) FROM test WHERE id=10;

	<!-- various function and operators for test coverage -->
	SELECT SINT(1-2) FROM test WHERE id=10;
	SELECT FIBONACCI(5) FROM test WHERE id=10;
	SELECT INTERVAL(1, -1,3,5.0) FROM test WHERE id=10;
	SELECT INTERVAL(id, id-1, id+2) FROM test WHERE id=10;
	SELECT BITDOT(5, 11,33,55) FROM test WHERE id=10;
	SELECT GEODIST(0,0,1,1) FROM test WHERE id=10;
	SELECT CONTAINS(POLY2D(1,2,3,4,5,6.0),2,3), CONTAINS(POLY2D(1.0,1+1,aa,4,5,6),22,3) FROM test WHERE id=10;
	SELECT CONTAINS(GEOPOLY2D(55.7522222, 37.6155556, 40.7141667, -74.0063889, 37.9833333, 23.7333333), 51.5, -0.116667) FROM test WHERE id=10;
	SELECT CONTAINS(GEOPOLY2D(55.7522222, 37.6155556, 40.7141667, -74.0063889, 37.9833333, 23.7333333), 43.25, -2.9666667) FROM test WHERE id=10;
	SELECT CRC32(TO_STRING(123 + 877)) FROM test WHERE id=10;
	SELECT ABS(-1), ABS(-1.1), CEIL(1.3), FLOOR(1.3), COS(3.14/2), LN(2.7), LOG10(100), EXP(1) FROM test WHERE id=10;
	SELECT SINT(aa), NOT SINT(aa), CRC32(kk) FROM test WHERE id=10;
	SELECT IN(id, 10.1) FROM test WHERE id=10;;

	SELECT (1=1 AND 1=0), (1=1 AND 1=1), (1=0 AND 1=0), (1=0 AND 1=1) FROM test WHERE id=10;
	SELECT (1=1 OR 1=0), (1=1 OR 1=1), (1=0 OR 1=0), (1=0 OR 1=1) FROM test WHERE id=10;
	SELECT NOT 1=1, NOT 1=0 FROM test WHERE id=10;
	SELECT 1&lt;=1, 1&lt;=2, 1&lt;&gt;1, 1&lt;&gt;0 FROM test WHERE id=10;

	SELECT 3/2, id*2-2.1, 1.0-(1.0+id), 2*(3*id), 2.0/(3.0*id), 3 div 2, 3.1 div 2.2 FROM test WHERE id=10;
	SELECT (1-id)+id, (1.0/id)*id, id/2.5 FROM test WHERE id=10;
	SELECT 1&amp;3, 1&amp;2, 1|3, 1|2, 13%10, 3%10 FROM test WHERE id=10;
	SELECT 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+11 FROM test WHERE id=10;

	SET GLOBAL @happyvar = (432);
	SELECT IN(mm, @happyvar) FROM test WHERE id=10;

	SELECT FLOOR(f1*1000)*100000 + FLOOR(f2*1000) FROM test WHERE id=11;

	SELECT FLOOR(f1*1000)*10000000 + FLOOR(f2*1000) FROM test WHERE id=11
	
	<!-- added <,> comparsion to float and int to float conversion at filter -->
	SELECT id FROM cmp, cmp2 WHERE f1>22;
	SELECT id FROM cmp, cmp2 WHERE f1 between 21 and 32;
	SELECT id FROM cmp WHERE f1&lt;31.3;
	SELECT id FROM cmp WHERE f1&gt;=31.3;
	SELECT id, mva32 FROM cmp WHERE mva32&lt;=310;
	SELECT id, mva32 FROM cmp WHERE mva32&gt;220;
	SELECT id, mva32 FROM cmp WHERE mva32&lt;301;
	SELECT id, mva32 FROM cmp WHERE mva32&gt;=330;
	SELECT id, mva64 FROM cmp WHERE mva64&lt;=-350;
	SELECT id, mva64 FROM cmp WHERE mva64&gt;-200;
	SELECT id, mva64 FROM cmp WHERE mva64 between -100 and 400;
	SELECT id, mva32 FROM cmp WHERE mva32 between 105 and 205;
	SELECT id, mva32, mva64, mva32 m1, mva64 m2 FROM cmp WHERE m1&lt;=300;
	SELECT id, mva32, mva64, mva32 m1, mva64 m2 FROM cmp WHERE m2&gt;300;

	<!-- lets check that WEIGHT() works in expressions -->
	SELECT id, WEIGHT()*10 FROM test WHERE MATCH('ohai');

	<!-- check strings vs unescaping -->
	SELECT crc32('one two'), crc32('one\ttwo'), crc32('one\ntwo') FROM test WHERE id=1;

	<!-- check misc crazy stuff -->
	SELECT @@session.auto_increment_increment;
	SHOW COLLATION;
	SHOW CHARACTER SET;

	<!-- added check of different functions against MVA attributes -->
	SELECT id, IN(mva32,220,230) from cmp WHERE id=2;
	<!--fixme! The query below must be processed without errors -->
	SELECT id, IN(mva64,-350,230) from cmp WHERE id=2;
	SELECT id, IN(mva64,320) from cmp WHERE id=3;
	SELECT id, to_string(mva32) from cmp WHERE id=3;
	SELECT id, to_string(mva64) from cmp WHERE id=3;
	SELECT id, length(mva32) from cmp WHERE id=3;
	SELECT id, length(mva64) from cmp WHERE id=3;
	SELECT id, least(mva64) from cmp WHERE id=3;
	SELECT id, greatest(mva32) from cmp WHERE id=3;
	SELECT id, greatest(mva64) from cmp WHERE id=3;

	SELECT id, min(mva32) from cmp WHERE id=3;
	SELECT id, max(mva32) from cmp WHERE id=3;

	SELECT id, min(mva64) from cmp WHERE id=3;
	SELECT id, max(mva64) from cmp WHERE id=3;


	SELECT id, log10(mva32) from cmp WHERE id=3;
	SELECT id, log10(mva64) from cmp WHERE id=3;

	<!-- .NET connector uses "select timediff(curtime(),utc_time());" -->
	SELECT bigint(timediff(curtime(),utc_time())) % 15;

	<!-- BIGINT() function -->
	SELECT 1000000*1000000;
	SELECT bigint(1000000)*1000000;
	SELECT 1000000*bigint(1000000);
	SELECT bigint(1000000.0)*1000000;
	<!-- expect false, because above. Fixme! -->
	SELECT 1000000000000=bigint(1000000.0)*1000000;

	<!-- MySQL Workbench 6.0 and above -->
	SHOW SESSION VARIABLES LIKE 'lower_case_table_names';
	SELECT current_user();
	SELECT connection_id()-connection_id();
	SET CHARACTER SET utf8;
	SET SQL_SAFE_UPDATES=1;
	SHOW SESSION VARIABLES LIKE 'sql_mode';
	SHOW DATABASES;

	SELECT CONTAINS(POLY2D(poly2d_attr),2,3) FROM test LIMIT 1;

	SELECT 0 zero, 1/0, 1/zero FROM cmp LIMIT 1;
	SELECT 0 zero, SINT(-1) negative, ln(0), ln(zero), ln(-1), ln(negative) FROM cmp LIMIT 1;
	SELECT 0 zero, SINT(-1) negative, log2(0), log2(zero), log2(-1), log2(negative) FROM cmp LIMIT 1;
	SELECT 0 zero, SINT(-1) negative, log10(0), log10(zero), log10(-1), ln(negative) FROM cmp LIMIT 1;
	SELECT 0 zero, SINT(-1) negative, sqrt(0), sqrt(zero), sqrt(-1), sqrt(negative) FROM cmp LIMIT 1;

	<!-- IN() function for string attributes -->
	SELECT IN(kk,'one','ten','eleventy') FROM test;
	SELECT IN(kk,'is','not','there') FROM test;

	<!-- ATAN2() function -->
	SELECT ATAN2(0,1) FROM test WHERE id=10;
	SELECT ATAN2(1,0) FROM test WHERE id=10;
	SELECT ATAN2(0.75,0.25) FROM test WHERE id=10;
	SELECT ATAN2(0.25,0.75) FROM test WHERE id=10;

	SELECT GEODIST(0,0,1,1,{in=radians,out=kilometers}) FROM test WHERE id=10;

	<!-- .NET connector 6.9.6 uses select timediff(now(), utc_timestamp()) -->
	SELECT bigint(timediff(now(),utc_timestamp())) % 15;

	<!-- RAND() function, should be strictly deterministic (if called with arguments) -->
	select id, rand()*0, rand(0)*0, rand(1)*0 as p, rand(2)*0 as q, rand(id), rand(id+1) from test order by p asc, q asc;
	select id, floor(1 + rand(id) * 4294967295) as rand from test order by rand asc;

	<!-- filter by empty string -->
	select * from strings where string_value!='';
	select * from strings where string_value='';

	<!-- collation support in expressions -->
	select id, string_value, in(string_value,'asdf','qwer') as in_string, string_value='asdf' AS is_string from strings;
	select id, string_value from strings where string_value='asdf';
	select id, string_value, (string_value='asdf' or string_value='ASDF') as in_string from strings;
	select id, string_value, (string_value='asdf' or string_value='qwer') as in_string from strings;

	<!-- IN() filter for multiple strings, including empty ones, also test string pointers -->
	select id, string_value from strings where string_value in ('asdf','qwer','');
	select id, string_value from strings where string_value in ('asdf','qwer');
	select id, string_value from strings where string_value not in ('');
	select id, to_string(id) as p from strings where p in('1','3');
	select id, string_value from strings_dist where string_value in ('asdf','qwer');
	select id, string_value from strings_dist where string_value not in ('');

	<!-- CRC32 as BIGINT -->
	select CRC32('4759') AS test_crc FROM strings LIMIT 1;
	select BIGINT(CRC32('4759')) AS test_crc FROM strings LIMIT 1;
	select CRC32('4759') AS test_crc, CRC32('4759')=2182940993 AS is_crc FROM strings LIMIT 1;

	<!-- GEOPOLY -->
	SELECT CONTAINS(GEOPOLY2D(44.0,-88.0, 44.3,-88.6, 44.6,-88.0), 44.3, -88.5 ) from strings limit 1;
	SELECT CONTAINS(GEOPOLY2D(44.0,-88.0, 44.3,-88.6, 44.6,-88.0), 44.6, -88.5 ) from strings limit 1;
	SELECT CONTAINS(GEOPOLY2D(44.0,-88.0, 44.0, -88.0, 44.3,-88.6, 44.6,-88.0), 44.3, -88.5 ) from strings limit 1;
	SELECT CONTAINS(GEOPOLY2D(44.0,-88.0, 44.0, -88.0, 44.3,-88.6, 44.6,-88.0), 44.6, -88.5 ) from strings limit 1;

	<!-- regression hash as geodist argument -->
	select GEODIST(0,0,1,1, {in=radians, out=m} ) FROM dist;
	select GEODIST(0,0,1,1, {out=m, in=radians} ) FROM dist;
	select GEODIST(0,0,1,1, {out=m} ) FROM dist;
	select GEODIST(0,0,1,1, {in=radians} ) FROM dist;

	<!-- JDBC, MySQL Connector/J 5.1.36+ multiple sysvars select -->
	select @@session.auto_increment_increment AS v1, @@character_set_client as v2;

	<!-- regression escaped quote cut at distributed index -->
	SELECT id, IN(string_value,'as\'df') FROM test1_loc order by id asc;
	SELECT id, IN(string_value,'as\'df') FROM test1_dist order by id asc;

	<!-- regression json as string -->
	SELECT id, j j1, to_string ( j ) FROM test_json order by id asc;
	SELECT id, j j1, to_string ( j1 ) FROM test_json order by id asc;
	SELECT id, j.gid j1, to_string ( j.gid ) FROM test_json order by id asc;
	SELECT id, j.gid j1, to_string ( j1 ) FROM test_json order by id asc;
	SELECT id, j.uid j1, to_string ( j.uid ) FROM test_json order by id asc;
	SELECT id, j.uid j1, to_string ( j1 ) FROM test_json order by id asc;

	<!-- regression json field at expressions -->
	SELECT j.uid, bigint ( j.uid ) FROM test_json order by id asc;
	SELECT j.uid, bigint ( j.uid )+1 FROM test_json order by id asc;
	SELECT j.uid, abs ( j.uid ) FROM test_json order by id asc;
	SELECT j.uid, abs ( j.uid ) + 1 FROM test_json order by id asc;
	SELECT j.pct, abs ( j.pct ) FROM test_json order by id asc;
	SELECT j.pct, abs ( j.pct ) + 1 FROM test_json order by id asc;
	SELECT j.pct, abs ( j.pct ) + 1.1 FROM test_json order by id asc;
	SELECT j.pct, abs ( double(j.pct) ) FROM test_json order by id asc;
	SELECT j.uid, sqrt ( j.sq ) FROM test_json order by id asc;
	select GEODIST(j.lat, j.lon,0.937717,-0.0798578, {in=radians, out=m} ) FROM test_json;
	SELECT CONTAINS(POLY2D(j.poly), 2, 3) FROM test_json;
	SELECT CONTAINS(POLY2D(j.points[0], j.points[1], j.points[2], j.points[3], j.points[4], j.points[5]), 2, 3) FROM test_json;
	SELECT CONTAINS(POLY2D(j.poly), j.pct, 3 ) FROM test_json;
	SELECT CONTAINS(POLY2D(j.poly), 3, j.pct ) FROM test_json;

	<!-- regression for attribute names starting w/numbers -->
	SELECT 123_attr1 FROM test_name;
	SELECT `123_attr1` FROM test_name;
	SELECT `123_attr1` 000alias FROM test_name;
	SELECT `123_attr1` `000alias` FROM test_name;
	SELECT `123_attr1` `000alias` FROM test_name WHERE `000alias`>100 ;
	SELECT `123_attr1` `000alias1`, `10000attr2` `000alias2` FROM test_name WHERE `000alias1`>100 AND `000alias2`=2000 ;

	<!-- column aliases with column -->
	SELECT id id:id FROM test_name order by id asc;
	SELECT id as id:id FROM test_name order by id asc;
	SELECT id foo:bar FROM test_name order by id asc;
	SELECT id as foo:bar FROM test_name order by id asc;
	SELECT id foo:bar:baz FROM test_name order by id asc;
	SELECT id as foo:bar:baz FROM test_name order by id asc;
    
	<!-- uuid_short -->
	SELECT uuid_short();
	SELECT id, uuid_short() as uid FROM test_name order by id asc option threads=1;
	SELECT id, uuid_short() as uid FROM test_name order by id asc option threads=1;
	SELECT uuid_short();
	CALL uuid_short(1);
	CALL uuid_short(4);
    
</sphinxql>
</sphqueries>

</test>
