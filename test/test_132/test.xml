<?xml version="1.0" encoding="utf-8"?>
<test>

<name>MVA persistent attribute updates</name>

<requires>
	<variant_match/>
	<non-columnar/>
</requires>

<config>
indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
	binlog_path = #
	attr_flush_period = 3600 # not autoflush during test run but be able to do FlushAttributes command
	<Dynamic>
		<Variant>threads = 1</Variant>
		<Variant/>
	</Dynamic>
	}

source src
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT id, text, section, mva1 FROM test_table
	sql_attr_uint	= section
<Dynamic>	
	<Variant>sql_attr_multi = uint mva1 from field mva1</Variant>
	<Variant>sql_attr_multi = bigint mva1 from field mva1</Variant>
</Dynamic>	
}

index idx
{
	source			= src
	path			= <data_path/>/main132
}

index rt
{
	type = rt
	path			= <data_path/>/rt

	rt_field		= body
	rt_attr_multi	= mva1
	rt_attr_uint	= gid
	rt_attr_multi	= mva2
}

index hung
{
	type = rt
	path			= <data_path/>/hung

	rt_field		= body
	rt_attr_multi	= mva1
	rt_attr_uint	= gid
	rt_attr_multi	= mva2
}

index rt_mva
{
	type = rt
	path			= <data_path/>/rt_mva
	rt_mem_limit 	= 128k

	rt_field		= text
	rt_attr_multi	= mva
}

source src_save
{
	type			= mysql
	<sql_settings/>	
	sql_query = SELECT id, 1 as idd, '1, 2, 3, 4, 5' as mva, 'dummy' as text FROM mva_table
	sql_attr_uint	= idd
	sql_attr_multi = uint mva from field
}

index mva_save
{
	source			= src_save
	path			= <data_path/>/mva_save
}
</config>

<queries>
	<sphinxql>
		insert into rt (id, gid, mva1, mva2, body) values (1, 11, (1, 1), (2), 'dummy'), (3, 33, (3, 3), (3), 'dummy');
	</sphinxql>

	<!-- iteration 1 -->
	<query mode="update_mva" index="idx">{"attrs":["mva1"],"values":{"1":[[2,3,4]],"3":[[6,7,8]]}}</query>
	<sphinxql>
		update idx set mva1=(3,2, 1, 2), mva1=(1, 2) where id=1;
		update rt set mva1=(3,2, 1, 2), gid=3212, mva2=(1, 2, 3, 4, 5, 6), mva2=(3,4,5) where id=1;
	</sphinxql>
	<sphinxql system="restart-daemon-no-warnings"/>

	<!-- iteration 2 -->
	<query mode="update_mva" index="idx">{"attrs":["mva1"],"values":{"1":[[2,3,4]],"3":[[6,7,8]]}}</query>
	<sphinxql>
		update idx set mva1=(3,2, 1, 2), mva1=(1, 2) where id=1;
		update rt set mva1=(3,2, 1, 2), gid=3212, mva2=(1, 2, 3, 4, 5, 6), mva2=(3,4,5) where id=1;
	</sphinxql>
	<sphinxql system="restart-daemon-no-warnings"/>

	<!-- iteration 3 -->
	<query mode="update_mva" index="idx">{"attrs":["mva1"],"values":{"1":[[2,3,4]],"3":[[6,7,8]]}}</query>
	<sphinxql>
		update idx set mva1=(3,2, 1, 2), mva1=(1, 2) where id=1;
		update rt set mva1=(3,2, 1, 2), gid=3212, mva2=(1, 2, 3, 4, 5, 6), mva2=(3,4,5) where id=1;
	</sphinxql>
	<sphinxql system="restart-daemon-no-warnings"/>

	<!-- iteration 4 -->
	<query mode="update_mva" index="idx">{"attrs":["mva1"],"values":{"1":[[2,3,4]],"3":[[6,7,8]]}}</query>
	<sphinxql>
		update idx set mva1=(3,2, 1, 2), mva1=(1, 2) where id=1;
		update rt set mva1=(3,2, 1, 2), gid=3212, mva2=(1, 2, 3, 4, 5, 6), mva2=(3,4,5) where id=1;
	</sphinxql>
	<sphinxql system="restart-daemon-no-warnings"/>

	<!-- regression that rt deadlock on smart attributes update -->
	<repeat count="2000" vars="i gid mva1 mva2" init="1 1000 1033 899" inc="1 1000 1000 1000">
		<sphinxql skip="1">
			replace into hung (id, gid, mva1, mva2, body) values (<i/>, <gid/>, (<mva1/>, <mva2/>), (<mva1/>), 'dummy1');
		</sphinxql>
	</repeat>


	<!-- regression that rt dumps MVA to plain index wrong way -->
	<repeat count="160" vars="i" init="1" inc="1" >
		<var name="vals"/>
		<repeat count="100" vars="i" inc="1" skip="1"> <var name="vals" delimiter=",">( <i/>, ' ', (<i/>) )</var> </repeat>
		<sphinxql skip="1">
			INSERT INTO rt_mva (id, text, mva) VALUES <vals/>;
		</sphinxql>
	</repeat>

	<sphinxql>
		select * from rt_mva order by id desc limit 3;
		select * from rt_mva where any(mva)&lt;17000 order by id asc limit 3;
		show meta;

		<!-- regression: crash on INSERT .. ( id, text, mva ) values ( 1, '', 333 ) -->
		replace into rt_mva (id, text, mva) values ( 1, ' ',  333 );

		<!-- regression: invalid syntax INSERT .. ( id, text, mva ) values ( 2, '', () ) -->
		replace into rt_mva (id, text, mva) values ( 2, ' ',  () );
		select * from rt_mva order by id asc limit 3;
		show meta;

		<!-- regression: crash on SaveAttributes -->
		flush attributes;
	</sphinxql>
	<repeat count="100">
	<sphinxql skip="1">
		UPDATE mva_save SET mva=(3,2, 1, 2) WHERE id>0;
	</sphinxql>
	</repeat>

	<sphinxql ignore="tag">
		flush attributes;
	</sphinxql>

	<sphinxql>
		<!-- regression: crash on mva min or max for empty mva array -->
		UPDATE mva_save SET mva = () WHERE id in (10);
		select id, mva a, least(a) lt, greatest(a) gr from mva_save order by id asc;
	</sphinxql>
</queries>


<DB_Create>
CREATE TABLE `test_table` (
  `id` int(11) DEFAULT NULL,
  `text` varchar (255) NOT NULL,
  `section` int(11) DEFAULT NULL,
  `mva1` varchar(255) NOT NULL  
)
</DB_Create>

<DB_Create>CREATE TABLE `mva_table` (  `id` int(11) DEFAULT NULL)</DB_Create>

<DB_Drop>DROP TABLE IF EXISTS `test_table`</DB_Drop>
<DB_Drop>DROP TABLE IF EXISTS `mva_table`</DB_Drop>

<DB_Insert>
	INSERT INTO `test_table` (`id`, `text`, `section`, `mva1`) VALUES
	(1, 'test1', 101, '1001'),
	(2, 'test2', 102, '1002 1023 4456'),
	(3, 'test3', 103, '1003 1008 1010'),
	(4, 'test4', 104, '1004 1005 1006');
</DB_Insert>
<DB_Insert>
	<var name="vals"/>
	<repeat count="1000" vars="i" inc="1" init="1"><var name="vals" delimiter=",">(<i/>)</var></repeat>
	INSERT INTO `mva_table` (`id`) VALUES <vals/>;
</DB_Insert>

</test>
