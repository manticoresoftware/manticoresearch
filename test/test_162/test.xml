<?xml version="1.0" encoding="utf-8"?>
<test>

<name>string vs within group order</name>

<requires>
	<no_pseudo_sharding/>
</requires>

<config>
indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
}

source src
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, idd1, str1, body FROM test_table
	sql_attr_uint	= idd1
	sql_attr_string	= str1
}

index plain
{
	source			= src
	path			= <data_path/>/plain
}

index rt
{
	dict = keywords
	type	= rt
	rt_attr_uint	= idd1
	rt_attr_string	= str1
	rt_field	= body
	path			= <data_path/>/rt
}

source src1
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, idd1, idd2, str1 FROM test_table1
	sql_attr_uint	= idd1
	sql_attr_bigint	= idd2
	sql_attr_string	= str1
}

index plain1
{
	source			= src1
	path			= <data_path/>/plain1
}

source src2
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, idd1, idd2, str1 FROM test_table1
	sql_attr_uint	= idd1
}

index plain2
{
	source			= src2
	path			= <data_path/>/plain2
}
</config>

<db_create>
CREATE TABLE `test_table`
(
	`id` int(11) NOT NULL default '0',
	`idd1` int(11) NOT NULL default '0',
	`str1` varchar(1024) NOT NULL default '',
	`body` varchar(1024) NOT NULL default ''
)
</db_create>

<db_drop>
DROP TABLE IF EXISTS `test_table`
</db_drop>

<db_insert>
INSERT INTO `test_table` VALUES
( 1, 1,		'a aa',		'the dog' ),
( 2, 11,	'c cc',		'the cat' ),
( 3, 11,	'a a',		'the bird' ), 
( 4, 11,	'cc c',		'cat eats bird' ),
( 5, 3, 	'a a',		'dog eats cat' ), 
( 6, 1,		'c cc',		'bird' ), 
( 7, 1,		'a a',		'the cat' ),
( 8, 1,		'a a',		'eats' ),
( 9, 3, 	'c cc',		'the' )
</db_insert>

<db_create>
CREATE TABLE `test_table1`
(
	`id` int(11) NOT NULL default '0',
	`idd1` BIGINT NOT NULL default '0',
    `idd2` BIGINT NOT NULL default '0',
	`str1` varchar(1024) NOT NULL default ''
)
</db_create>
<db_drop>DROP TABLE IF EXISTS `test_table1`</db_drop>
<db_insert> INSERT INTO `test_table1` VALUES ( 1, 2019309824, 44500000000, 'a aa' ), ( 2, 2119973120, 45500000000, 'a aa' ), ( 3, 2147432704, 46500000000, 'a aa' )</db_insert>

<queries>
<query mode="extended2" index="plain" groupattr="idd1" groupfunc="attr" groupsort="idd1 asc" sortmode="extended" sortby="str1 asc"/>
<query mode="extended2" index="plain" groupattr="idd1" groupfunc="attr" groupsort="idd1 asc" sortmode="extended" sortby="str1 desc"/>
<query mode="extended2" index="plain" groupattr="idd1" groupfunc="attr" groupsort="idd1 asc" sortmode="extended" sortby="str1 asc">the | dog | cat</query>
<query mode="extended2" index="plain" groupattr="idd1" groupfunc="attr" groupsort="idd1 asc" sortmode="extended" sortby="str1 desc">the | eats | bird</query>
<sphinxql>
select * from plain group by idd1 within group order by str1 asc;
select * from plain group by idd1 within group order by str1 desc;
select * from plain where match('the | dog | cat') group by idd1 within group order by str1 asc;
select * from plain where match('the | eats | bird') group by idd1 within group order by str1 desc;
select *, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc;
select * from ( select *, sum(id) as s1, sum(idd1) as s2, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc ) order by s1 asc;
select * from ( select *, sum(id) as s1, sum(idd1) as s2, s1+s2 as s3, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc ) order by s1 desc;
select * from ( select *, sum(id) as s1, sum(idd1) as s2, s1+s2 as s3, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc ) order by s2 desc;
select * from ( select *, sum(id) as s1, sum(idd1) as s2, s1+s2 as s3, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc ) order by s3 desc;

<!-- regression aggregate dependend attributes at RT index -->

INSERT INTO rt (id, idd1, str1, body) VALUES
( 1, 1,		'a aa',		'the dog' ),
( 2, 11,	'c cc',		'the cat' ),
( 3, 11,	'a a',		'the bird' ), 
( 4, 11,	'cc c',		'cat eats bird' ),
( 5, 3, 	'a a',		'dog eats cat' ), 
( 6, 1,		'c cc',		'bird' ), 
( 7, 1,		'a a',		'the cat' ),
( 8, 1,		'a a',		'eats' ),
( 9, 3, 	'c cc',		'the' )
;
select *, sum(id) as s1, sum(idd1) as s2, s1+s2 as s3, group_concat(id) from plain where match('the | eats | bird') group by idd1 within group order by str1 asc;
select *, sum(id) as s1, sum(idd1) as s2, s1+s2 as s3, group_concat(id) from rt    where match('the | eats | bird') group by idd1 within group order by str1 asc;

<!-- regression aggregate alias shadows index attribute -->
select id, sum(idd1) as idd1 from plain where match('the | eats | bird') order by id asc;
select id, idd1+1 as idd1 from plain where match('the | eats | bird') order by id asc;

select sum(idd1) as s2, s2+0 as s3 from plain where match('the | eats | bird') group by idd1 within group order by id asc;
select sum(idd1) as idd1, idd1+0 as s3 from plain where match('the | eats | bird') group by idd1 within group order by id asc;
select sum(idd1) as idd1, idd1+0 as s3 from plain where match('the | eats | bird') order by id asc;

select sum(idd1) as idd1, idd1+0 as s3 from plain1 order by id asc;
select sum(idd1) as i1, sum(idd2) as i2, i1+i2 as s3 from plain1 order by id asc;

<!-- regression aggregate alias shadows index attribute -->
select sum(idd1) as idd1 from plain2;
select min(idd1) as idd1 from plain2;
select max(idd1) as idd1 from plain2;
select avg(idd1) as idd1 from plain2;

<!-- regression aggregate alias shadows the first attribute -->
select min(idd1) as id from plain2;

</sphinxql></queries>

</test>
