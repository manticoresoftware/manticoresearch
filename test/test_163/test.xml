<?xml version="1.0" encoding="utf-8"?>
<test>

<name>string attribute vs different indexes, attributes UNION</name>
<num_agents>3</num_agents>
<requires><sphinxql_keep_null/></requires>

<config>

indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
}

source src_main
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, body, CONCAT(str1, ' main') AS str1, idd1, 100 as tag FROM test_table
	sql_attr_uint	= idd1
	sql_attr_uint	= tag
	sql_attr_string = str1
}

source src_delta1
{
	type			= mysql
	<sql_settings/>
	
	sql_query		= SELECT id, body, CONCAT(str1, ' delta1') AS str1, idd1, 101 as tag FROM test_table where id>3
	sql_attr_uint	= idd1
	sql_attr_uint	= tag
	sql_attr_string = str1
	sql_query_killlist = SELECT 2
}

source src_delta2
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, body, 'delta2' as str1, CONCAT(str1, ' delta2') AS str2, idd1, 102 as tag FROM test_table where id>4
	sql_attr_uint	= idd1
	sql_attr_uint	= tag
	sql_attr_string = str1
	sql_attr_string = str2
	sql_query_killlist = SELECT 2
}

<agent0>
index main
{
	source			= src_main
	path			= <data_path/>/main
}


index delta2
{
	source			= src_delta2
	path			= <data_path/>/delta2
}

index dist1
{
	type = distributed
	local = main
	agent = <agent1_address/>:agent1_delta2
}

index dist2
{
	type = distributed
	local = delta2
	agent = <agent2_address/>:agent2_delta1
}

index dist3
{
	type = distributed
	agent = <agent1_address/>:agent1_main
	agent = <agent2_address/>:agent2_delta1
}

source src_bool
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1>2 as attr FROM test_table
	sql_attr_bool	= attr
}
source src_uint
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1*100 as attr FROM test_table
	sql_attr_uint	= attr
}
source src_float
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1/1.73 as attr FROM test_table
	sql_attr_float	= attr
}
source src_bigint
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1*100000000000 as attr FROM test_table
	sql_attr_bigint	= attr
}

index u_bool
{
	source			= src_bool
	path			= <data_path/>/u_bool
}
index u_uint
{
	source			= src_uint
	path			= <data_path/>/u_uint
}
index u_float
{
	source			= src_float
	path			= <data_path/>/u_float
}
index u_bigint
{
	source			= src_bigint
	path			= <data_path/>/u_bigint
}

index u_dist10
{
	type = distributed
	local = u_bool
	local = u_float
}
index u_dist11
{
	type = distributed
	local = u_float
	local = u_bool
}
index u_dist20
{
	type = distributed
	local = u_bool
	local = u_uint
	local = u_bigint
}
index u_dist21
{
	type = distributed
	local = u_bool
	local = u_bigint
	local = u_uint
}
index u_dist22
{
	type = distributed
	local = u_bigint
	local = u_bool
	local = u_uint
}
index u_dist23
{
	type = distributed
	local = u_bigint
	local = u_uint
	local = u_bool
}

source src_attr1
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1 as attr1, 1 as tag FROM test_table where id in ( 1,2,3 )
	sql_attr_uint	= attr1
	sql_attr_uint = tag
}
source src_attr2
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, idd1 as attr2, 2 as tag FROM test_table where id in ( 4, 5, 6 )
	sql_attr_uint	= attr2
	sql_attr_uint = tag
}
index idx_attr1
{
	source			= src_attr1
	path			= <data_path/>/idx_attr1
}
index idx_attr2
{
	source			= src_attr2
	path			= <data_path/>/idx_attr2
}
index u_dist_aa
{
	type = distributed
	local = idx_attr1
	local = idx_attr2
}

source src_mva
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT id, body, 2 as tag, '100, 400, 500' as mva  FROM test_table
	sql_attr_uint = tag
	sql_attr_multi = uint mva from field
	sql_field_string = body
}
index idx_mva
{
	source			= src_mva
	path			= <data_path/>/idx_mva
}

source src_count1
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT 1, 11 as idd, 'of the box' text UNION SELECT 2, 11 as idd, 'we are the boxes'
	sql_attr_uint	= idd
}

source src_count2
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT 10, 22 as idd, 'of the fox' text UNION SELECT 11, 22 as idd, 'we are the foxes'
	sql_attr_uint	= idd
}

index count1
{
	source			= src_count1
	path			= <data_path/>/count1
}

index count2
{
	source			= src_count2
	path			= <data_path/>/count2
}

index dist_count1
{
	type					= distributed
	local					= count1
	local					= count2
}

index dist_count2
{
	type					= distributed
	local					= count1
	agent					= <my_address/>:count2
}

source src_test_gr1
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT * from test_gr1
	sql_attr_uint	= idd
    sql_attr_multi = uint mva from field
}

index test_gr1
{
	source			= src_test_gr1
	path			= <data_path/>/test_gr1
}

source src_test_gr2
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT * from test_gr2
	sql_attr_uint	= idd
    sql_attr_multi = uint mva from field
}

index test_gr2
{
	source			= src_test_gr2
	path			= <data_path/>/test_gr2
}

source src_test_gr3
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT * from test_gr3
	sql_attr_uint	= idd
    sql_attr_multi = uint mva from field
}

index test_gr3
{
	source			= src_test_gr3
	path			= <data_path/>/test_gr3
}

source src_test_delta1
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT * from test_delta1
	sql_attr_uint	= idd
    sql_attr_multi = uint mva from field
}

index test_delta1
{
	source			= src_test_delta1
	path			= <data_path/>/test_delta1
}

</agent0>

<agent1>
index agent1_main
{
	source			= src_main
	path			= <data_path/>/agent1_main
}

index agent1_delta2
{
	source			= src_delta2
	path			= <data_path/>/agent1_delta2
}
</agent1>

<agent2>
index agent2_delta1
{
	source			= src_delta1
	path			= <data_path/>/agent2_delta1
}
</agent2>


</config>

<db_create>
CREATE TABLE `test_table`
(
	`id` int(11) NOT NULL default '0',
	`idd1` int(11) NOT NULL default '0',
	`str1` varchar(255) NOT NULL default '',
	`body` varchar(255) NOT NULL default ''
)
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_table`</db_drop>

<db_insert>
INSERT INTO `test_table` VALUES
( 1, 1,		'a aa',		'the dog' ),
( 2, 11,	'c cc',		'the cat' ),
( 3, 11,	'a a',		'the bird' ), 
( 4, 11,	'cc c',		'cat eats bird' ),
( 5, 3, 	'a a',		'dog eats cat' ), 
( 6, 1,		'c cc',		'bird' ), 
( 7, 1,		'a a',		'the cat' ),
( 8, 1,		'a a',		'eats' ),
( 9, 3, 	'c cc',		'the' )
</db_insert>

<db_create>
CREATE TABLE `test_gr1`
(
	`id` int(11) NOT NULL default '0',
	`idd` int(11) NOT NULL default '0',
	`body` varchar(255) NOT NULL default '',
    `mva` varchar(255) NOT NULL default ''
)
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_gr1`</db_drop>

<db_insert>
	<var name="vals"/>
	<repeat count="999" vars="i j" init="1 2" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'missed doc','1,2,3')</var></repeat>
	<repeat count="3201" vars="i j" init="102001 102001" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'matched doc','1,2,3')</var></repeat>
	INSERT INTO test_gr1 VALUES <vals/>
</db_insert>

<db_create>
CREATE TABLE `test_gr2`
(
	`id` int(11) NOT NULL default '0',
	`idd` int(11) NOT NULL default '0',
	`body` varchar(255) NOT NULL default '',
    `mva` varchar(255) NOT NULL default ''    
)
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_gr2`</db_drop>

<db_insert>
	<var name="vals"/>
	<repeat count="999" vars="i j" init="102001 102002" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'missed doc','1,2,3')</var></repeat>
    <repeat count="4801" vars="i j" init="101001 101001" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'matched doc','1,2,3')</var></repeat>
	<repeat count="4201" vars="i j" init="150001 150002" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'matched doc','1,2,3')</var></repeat>
	INSERT INTO test_gr2 VALUES <vals/>
</db_insert>

<db_create>
CREATE TABLE `test_gr3`
(
	`id` int(11) NOT NULL default '0',
	`idd` int(11) NOT NULL default '0',
	`body` varchar(255) NOT NULL default '',
    `mva` varchar(255) NOT NULL default ''    
)
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_gr3`</db_drop>

<db_insert>
	<var name="vals"/>
	<repeat count="999" vars="i j" init="20001 20002" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'missed doc','1,2,3')</var></repeat>
    <repeat count="4801" vars="i j" init="101001 101001" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'matched doc','1,2,3')</var></repeat>
	<repeat count="4901" vars="i j" init="250001 250002" inc="1 1"><var name="vals" delimiter=",">(<i/>,<j/>, 'matched doc','1,2,3')</var></repeat>
	INSERT INTO test_gr3 VALUES <vals/>
</db_insert>

<db_create>
CREATE TABLE `test_delta1`
(
	`id` int(11) NOT NULL default '0',
	`idd` int(11) NOT NULL default '0',
	`body` varchar(255) NOT NULL default '',
    `mva` varchar(255) NOT NULL default ''    
)
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_delta1`</db_drop>

<db_insert>
INSERT INTO `test_delta1` VALUES
( 1, 1,		'missed doc' ),
( 2, 1,		'missed doc' ),
( 3, 1,		'missed doc' ),
</db_insert>


<queries>
	<query select="*, count(*) as cnt, 1 as gr " groupfunc="attr" groupattr="gr" index="main"/>
<sphinxql>
	select * from dist1 order by str2 asc, idd1 desc;
	select * from dist1 order by str2 desc, idd1 asc;
	select * from dist2 order by str1 asc;
	select * from dist2 order by str1 desc;
	select * from dist3 order by str1 asc, id asc;
	select * from dist3 order by str1 desc, idd1 desc;

	<!-- here is going new feature seamless conversion of result set attributes ( bool -> float ) | ( bool -> uint -> bigint ) -->
	select * from u_bool, u_float;
	select * from u_float, u_bool;
	select * from u_bool, u_uint, u_bigint;
	select * from u_uint, u_bool, u_bigint;
	select * from u_uint, u_bigint, u_bool;
	select * from u_bigint, u_uint, u_bool ;
	select * from u_dist10;
	select * from u_dist11;
	select * from u_dist20;
	select * from u_dist21;
	select * from u_dist22;
	select * from u_dist23;
	<!-- still invalid -->
	select * from u_float, u_uint;
	select * from u_float, u_bigint;
	select * from u_uint, u_float;
	select * from u_bigint, u_float;
	<!-- test of exist function -->
	select * from u_dist_aa order by id asc;
	select *, exist ( ' aTTr2', 11 ) as cnd from u_dist_aa where cnd=11 order by id asc;
	select *, exist ( ' Attr1', 1 ) as cnd from u_dist_aa where cnd=1 order by id asc;
	<!-- regression schema attributes with alias -->
	select tag, idd1, idd1 * 2 as rr from dist2 order by id asc;
	select tag, idd1 as r0, r0 * 2 as rr from dist2 order by id asc;
	<!-- alias as shema attribute -->
	select tag, idd1 as str1, str1 as str2 from dist2 order by id asc;
	<!-- checking attribute aliases -->
	select str1 as str11 from main;

	<!-- regression exist -->
	select *, exist ( 'mva', 1000 ) + id as cnd1 from idx_mva where cnd1 &lt; 5;
	select *, exist ( 'body', 1 ) as b from idx_mva;

	<!--regression API count(*) vs compat -->
	SELECT *, count(*) as cnt, 1 as gr FROM main GROUP BY gr;

	<!-- regression bigint function vs udf return type -->
	select *, bigint(idd1) b, min( bigint(idd1)) c from main;
	select *, bigint(idd1) b, min( bigint(idd1)) c, 1 as gr from main GROUP BY gr;

	<!-- empty result set with count(*) -->
	select count(*) from count2 where id in (1,2); show meta like 'total%';
	select *, count(*) from count2 where id in (1,2); show meta like 'total%';
	select count(*) from count1, count2 where id in (1,2); show meta like 'total%';
	select count(*) from count2, count1 where id in (1,2); show meta like 'total%';
	select *, count(*) from count1, count2 where id in (1,2); show meta like 'total%';
	select *, count(*) from count2, count1 where id in (1,2); show meta like 'total%';
	select idd, count(*) from count1, count2 where id in (1,2); show meta like 'total%';
	select idd, count(*) from count2, count1 where id in (1,2); show meta like 'total%';
	select *, count(*) from count1, count2 where id in (100); show meta like 'total%';
	select idd, count(*) from count2, count1 where id in (100); show meta like 'total%';
	select count(*) from dist_count1 where id in (1,2); show meta like 'total%';
	select count(*) from dist_count2 where id in (1,2); show meta like 'total%';
	select *, count(*) from dist_count1 where id in (1,2); show meta like 'total%';
	select *, count(*) from dist_count2 where id in (1,2); show meta like 'total%';
	select idd, count(*) from dist_count1 where id in (1,2); show meta like 'total%';
	select idd, count(*) from dist_count2 where id in (10,11); show meta like 'total%';
	select *, count(*) from dist_count1 where id in (100); show meta like 'total%';
	select idd, count(*) from dist_count2 where id in (100); show meta like 'total%';

	<!-- empty result set with constant columns -->
	select *, 123456, 2+2, sin(1.0), sin(idd), idd+1, count(*) from count2;
	select *, 123456, 2+2, sin(1.0), sin(idd), idd+1, count(*) from count2 where id in (1,2);

	<!-- empty result set with multiple counts -->
	select idd i, count(*), idd b, count(*) c, count(distinct i) from count2  where id in (1,2);
	select idd i, count(*), idd b, count(*) c, count(distinct i) d from count2  where id in (1,2);

	<!-- crash on count distinct with increased matches -->
    SELECT *, COUNT(DISTINCT id) AS gd FROM test_gr1 ,test_gr2 ,test_gr3 ,test_delta1 WHERE MATCH('matched') GROUP BY idd LIMIT 0,1 OPTION max_matches=1400, threads=1; 
</sphinxql></queries>

</test>
