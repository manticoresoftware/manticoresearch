<?xml version="1.0" encoding="utf-8"?>
<test>
<name>multi-queries and facet keyword</name>
<config>
searchd
{
	<searchd_settings/>
}

index facetdemo
{
	type              = rt
	path              = <data_path/>/facetdemo
	rt_field          = title
	rt_field          = property
	rt_attr_string    = title
	rt_attr_string    = brand_name
	rt_attr_string    = property
	rt_attr_multi     = categories
	rt_attr_uint      = price
	rt_attr_uint      = brand_id
	rt_attr_json      = j
}

index facetdemo2
{
	source            = src
	path              = <data_path/>/facets
}

source src
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT * FROM test_table
	sql_attr_uint     = price
	sql_attr_uint     = brand_id
	sql_field_string  = title
	sql_attr_string   = brand_name
	sql_field_string  = property
	sql_attr_multi    = uint categories from field
	sql_attr_json     = j
}

index facetdemo3
{
	type              = distributed
	local             = facetdemo
}

index facetdemo4
{
	type              = distributed
	agent             = <my_address/>:facetdemo
}

source src10
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT *, price as price_i, price as price_b FROM test_table
	sql_attr_uint     = price_i
	sql_attr_bigint   = price_b
}

index facet_gr1
{
	source            = src10
	path              = <data_path/>/facet_gr1
}

source src_fs1
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT * FROM table_fs1
	sql_attr_string   = s_color
	sql_attr_json     = j
}


index fs1
{
	source            = src_fs1
	path              = <data_path/>/fs1
}

source src_11
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT id, price, categories FROM test_table where id in (1,2,3,4)
	sql_attr_uint     = price
	sql_attr_multi    = uint categories from field
}

source src_12
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT id, price, categories FROM test_table where id in (6,7,8,9)
	sql_attr_uint     = price
	sql_attr_multi    = uint categories from field
}

index loc11
{
	source            = src_11
	path              = <data_path/>/loc11
}

index loc12
{
	source            = src_12
	path              = <data_path/>/loc12
}

index dist11
{
	type              = distributed
	local             = loc11
    local             = loc12
}

index dist12
{
	type              = distributed
	local             = loc11
    agent             = <my_address/>:loc12
}

source src_multi1
{
	type              = mysql
	<sql_settings/>
	sql_query         = SELECT * FROM table_multi1
	sql_attr_uint   = brand_id
	sql_attr_json     = j
}


index multi1
{
	source            = src_multi1
	path              = <data_path/>/multi1
}


</config>

<db_create>
CREATE TABLE `test_table` (
  `id` int(11),
  `price` int(11),
  `brand_id` int(11),
  `title` varchar(255),
  `brand_name` varchar(255),
  `property` varchar(255),
  `categories` varchar(255),
  `j` varchar(255)
);
</db_create>

<db_drop>DROP TABLE IF EXISTS `test_table`;</db_drop>

<db_insert>
insert into test_table (id,price,brand_id,title,brand_name,property,categories,j) values
(1,529,9,'Product Five Two','Brand Nine','Four','(13,14)','{x:[13,14],a:["a13","a14"]}'),
(2,173,10,'Product Five Seven','Brand Ten','Four','(10)','{x:[10],a:["a10"]}'),
(3,121,1,'Product Seven Nine','Brand One','Five','(13,14,15)','{x:[13,14,15],a:["a13","a14","a15"]}'),
(4,474,7,'Product Ten Three','Brand Seven','Nine','(10,11,12)','{x:[10,11,12],a:["a10","a11","a12"]}'),
(5,20,7,'Product Ten Four','Brand Seven','Seven','(13)','{x:[13],a:["a13"]}'),
(6,100,3,'Product One Three','Brand Three','Seven','(10)','{x:[10],a:["a10"]}'),
(7,724,9,'Product Four Eight','Brand Nine','Five','(11,12,13)','{x:[11,12,13],a:["a11","a12","a13"]}'),
(8,13,3,'Product Seven One','Brand Three','Eight','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}'),
(9,54,2,'Product Ten Seven','Brand Two','Eight','(11)','{x:[11],a:["a11"]}'),
(10,986,6,'Product Six Ten','Brand Six','Eight','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}'),
(11,100,10,'Product One Ten','Brand Ten','Four','(11)','{x:[11],a:["a11"]}'),
(12,69,10,'Product Five Seven','Brand Ten','Two','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}'),
(13,365,4,'Product Two Nine','Brand Four','Ten','(10,11,12)','{x:[10,11,12],a:["a10","a11","a12"]}'),
(14,455,1,'Product Two Eight','Brand One','Nine','(13,14,15)','{x:[13,14,15],a:["a13","a14","a15"]}'),
(15,718,4,'Product Nine Two','Brand Four','Eight','(10)','{x:[10],a:["a10"]}'),
(16,758,9,'Product Eight Ten','Brand Nine','Seven','(13)','{x:[13],a:["a13"]}'),
(17,493,4,'Product Nine Six','Brand Four','Five','(11,12)','{x:[11,12],a:["a11","a12"]}'),
(18,413,3,'Product Eight Five','Brand Three','Four','(11,12,13)','{x:[11,12,13],a:["a11","a12","a13"]}'),
(19,78,4,'Product Six Five','Brand Four','Two','(12)','{x:[12],a:["a12"]}'),
(20,169,4,'Product Seven Six','Brand Four','Eight','(10,11)','{x:[10,11],a:["a10","a11"]}')
</db_insert>

<db_create>
CREATE TABLE `table_fs1` (
  `id` int(11),
  `title` varchar(255),
  `s_color` varchar(255),
  `j` varchar(255)
);
</db_create>

<db_drop>DROP TABLE IF EXISTS `table_fs1`;</db_drop>

<db_insert>
insert into table_fs1 (id,title,s_color,j) values
(1,'Product 1', 'red', '{x:[13,14],color:"red"}'),
(2,'Product 2', 'blue', '{x:[23,24],color:"blue"}'),
(3,'Product 3', 'green', '{x:[33,34],color:"green"}'),
(4,'Product 4', 'red', '{x:[43,44],color:"red"}'),
(5,'Product 5', 'blue', '{x:[53,54],color:"blue"}')
</db_insert>

<db_create>
CREATE TABLE `table_multi1` (
  `id` int(11),
  `title` varchar(255),
  `brand_id` int(11),
  `j` varchar(255)
);
</db_create>
<db_drop>DROP TABLE IF EXISTS `table_multi1`;</db_drop>

<db_insert>
insert into table_multi1 (id,title,brand_id,j) values
(1,'Product 1', 11, '{a:13, b:14}'),
(2,'Product 2', 12, '{a:13, b:12}'),
(3,'Product 3', 13, '{a:11, b:13}')
</db_insert>

<queries><sphinxql>

insert into facetdemo (id,price,brand_id,title,brand_name,property,categories,j) values
(1,529,9,'Product Five Two','Brand Nine','Four',(13,14),'{x:[13,14],a:["a13","a14"]}'),
(2,173,10,'Product Five Seven','Brand Ten','Four',(10),'{x:[10],a:["a10"]}'),
(3,121,1,'Product Seven Nine','Brand One','Five',(13,14,15),'{x:[13,14,15],a:["a13","a14","a15"]}'),
(4,474,7,'Product Ten Three','Brand Seven','Nine',(10,11,12),'{x:[10,11,12],a:["a10","a11","a12"]}'),
(5,20,7,'Product Ten Four','Brand Seven','Seven',(13),'{x:[13],a:["a13"]}'),
(6,100,3,'Product One Three','Brand Three','Seven',(10),'{x:[10],a:["a10"]}'),
(7,724,9,'Product Four Eight','Brand Nine','Five',(11,12,13),'{x:[11,12,13],a:["a11","a12","a13"]}'),
(8,13,3,'Product Seven One','Brand Three','Eight',(12,13,14),'{x:[12,13,14],a:["a12","a13","a14"]}'),
(9,54,2,'Product Ten Seven','Brand Two','Eight',(11),'{x:[11],a:["a11"]}'),
(10,986,6,'Product Six Ten','Brand Six','Eight',(12,13,14),'{x:[12,13,14],a:["a12","a13","a14"]}'),
(11,100,10,'Product One Ten','Brand Ten','Four',(11),'{x:[11],a:["a11"]}'),
(12,69,10,'Product Five Seven','Brand Ten','Two',(12,13,14),'{x:[12,13,14],a:["a12","a13","a14"]}'),
(13,365,4,'Product Two Nine','Brand Four','Ten',(10,11,12),'{x:[10,11,12],a:["a10","a11","a12"]}'),
(14,455,1,'Product Two Eight','Brand One','Nine',(13,14,15),'{x:[13,14,15],a:["a13","a14","a15"]}'),
(15,718,4,'Product Nine Two','Brand Four','Eight',(10),'{x:[10],a:["a10"]}'),
(16,758,9,'Product Eight Ten','Brand Nine','Seven',(13),'{x:[13],a:["a13"]}'),
(17,493,4,'Product Nine Six','Brand Four','Five',(11,12),'{x:[11,12],a:["a11","a12"]}'),
(18,413,3,'Product Eight Five','Brand Three','Four',(11,12,13),'{x:[11,12,13],a:["a11","a12","a13"]}'),
(19,78,4,'Product Six Five','Brand Four','Two',(12),'{x:[12],a:["a12"]}'),
(20,169,4,'Product Seven Six','Brand Four','Eight',(10,11),'{x:[10,11],a:["a10","a11"]}')

<!-- multi-queries require at least one ';' (see helpers.inc) -->

<!-- standard multi-queries: rt, plain, local, agent (the latter two aren't optimized, see query log) -->
select groupby() as selected,count(*) as cnt from facetdemo group by categories order by cnt desc limit 0,10; select groupby() as selected,count(*) as cnt from facetdemo group by brand_id order by cnt desc limit 0,10; show meta like 'multiplier';
select groupby() as selected,count(*) as cnt from facetdemo2 group by categories order by cnt desc limit 0,10; select groupby() as selected,count(*) as cnt from facetdemo2 group by brand_id order by cnt desc limit 0,10; show meta like 'multiplier';
select groupby() as selected,count(*) as cnt from facetdemo3 group by categories order by cnt desc limit 0,10; select groupby() as selected,count(*) as cnt from facetdemo3 group by brand_id order by cnt desc limit 0,10; show meta like 'multiplier';
select groupby() as selected,count(*) as cnt from facetdemo4 group by categories order by cnt desc limit 0,10; select groupby() as selected,count(*) as cnt from facetdemo4 group by brand_id order by cnt desc limit 0,10; show meta like 'multiplier';

<!-- facet keyword for rt and plain indexes -->
select id from facetdemo limit 0,1 facet brand_id as x order by x asc; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet interval(price,500) as x order by x asc; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet brand_name by brand_id; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet brand_name,property by brand_id,property; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet brand_id+1 by brand_id+2 order by count(*) asc; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet brand_id order by facet() asc; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet brand_id+1-1 order by facet() desc; show meta like 'multiplier';
select id from facetdemo limit 0,1 facet categories facet j.x facet j.a; show meta like 'multiplier';
select * from facetdemo where match ('one') limit 0,15 facet brand_name, brand_id by brand_id order by brand_id asc facet property order by count(*) desc facet interval(price,200,400,600,800) order by facet() asc; show meta;

select id from facetdemo2 limit 0,1 facet brand_id as x order by x asc; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet interval(price,500) as x order by x asc; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet brand_name by brand_id; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet brand_name,property by brand_id,property; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet brand_id+1 by brand_id+2 order by count(*) asc; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet brand_id order by facet() asc; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet brand_id+1-1 order by facet() desc; show meta like 'multiplier';
select id from facetdemo2 limit 0,1 facet categories order by facet() desc facet j.x order by facet() desc facet j.a order by facet() asc; show meta like 'multiplier';
select * from facetdemo2 where match ('one') limit 0,15 facet brand_name, brand_id by brand_id order by brand_id asc facet property order by count(*) desc facet interval(price,200,400,600,800) order by facet() asc; show meta;

<!-- interval function for json fields -->
select j.x from facetdemo limit 0,1 facet interval(j.x[0],10,11,12,13); show meta like 'multiplier';

<!-- multi-queries with string filters -->
select id, title, property from facetdemo2 where match ('product') and property='Four' order by id asc; select id, title, property from facetdemo2 where match ('product') and property='Seven' order by id asc; show meta like 'multiplier';

<!-- count(*) statement with different spacing -->
select id from facetdemo limit 0,1 facet brand_id order by count(*) asc;;
select id from facetdemo limit 0,1 facet brand_id order by count(  *) asc;;
select id from facetdemo limit 0,1 facet brand_id order by count ( *  ) asc;;
select id from facetdemo limit 0,1 facet brand_id order by count (* ) asc;;
select id from facetdemo limit 0,1 facet brand_id order by count(* ) asc;;

<!-- count(distinct) breaks multi-query -->
select brand_id, count(distinct price) d, count(*) c from facetdemo group by brand_id facet brand_id as x order by x asc; show meta like 'multiplier';
select brand_id, count(distinct price) d, count(*) c from facetdemo2 group by brand_id facet brand_id as x order by x asc; show meta like 'multiplier';

<!-- column aliasing -->
select * from facetdemo facet brand_id order by count(*) asc;;
select id from facetdemo facet brand_id as price order by count(*) asc;;

<!-- failures -->
select id, price from facetdemo facet brand_id as price order by count(*) asc;
select * from facetdemo facet brand_id as price order by count(*) asc;

<!-- regression crash on FACET\group by with different attribute sizes -->
select * from facet_gr1 order by id asc facet price_i order by id asc facet price_b order by id asc; show meta;

<!-- regression need to keep implicit group by for main query -->
select id, price_b, count(*) from facet_gr1 order by id asc facet price_b order by id asc; show meta;

select * from facetdemo where match ('one') limit 0,15 facet brand_name order by facet() asc facet interval(price,200,400,600,800) order by facet() asc; show meta like 'multiplier';
select * from facetdemo where match ('one') limit 0,15 facet brand_id order by facet() asc facet interval(price,200,400,600,800) order by facet() asc; show meta like 'multiplier';

<!-- regression order by string that is group by \ facet key -->
select id, property, count(*) c, groupby() gr from facetdemo2 group by property order by gr desc;
select id, property from facetdemo2 facet property order by facet() desc;;

<!-- regression crash on multiple same facet to JSON field -->
select id, j from facetdemo facet categories facet j.x facet j.a facet j.x;;
select id, j from facetdemo facet categories facet j.x facet j.a;;

<!-- regression crash on facet with order by JSON field or string -->
select id, j, s_color from fs1 facet j.color order by j.color desc;;
select id, j, s_color from fs1 facet j.color order by s_color desc;;
select id, j, s_color from fs1 facet s_color order by j.color desc;;

<!-- group by JSON.field with string at select list vs multi-query -->
select id, GROUPBY() as groupbystr, count(*) as c FROM facetdemo2 GROUP BY j['x'][0] ORDER BY groupbystr ASC; select id, GROUPBY() as groupbystr, count(*) as c FROM facetdemo2 GROUP BY j['a'][0] ORDER BY groupbystr ASC;

<!-- facet MVA wrong from distributed with agents and local -->
select * from dist11 facet categories order by FACET() asc;;
select * from dist12 facet categories order by FACET() asc;;

<!-- facet vs group by with multi grouper with JSON.field  -->
select *, count(*) from multi1 facet brand_id, j.a order by id asc;;
select *, count(*), brand_id, j.a from multi1 facet brand_id, j.a order by id asc;;
select *, count(*) from multi1 group by brand_id, j.a order by id asc;;
select *, count(*), brand_id, j.a from multi1 group by brand_id, j.a order by id asc;;

<!-- facet with default desc order -->
select id from facetdemo limit 0 facet brand_id order by count(*);;
<!-- facet with error at the FACET part -->
select id from facetdemo limit 0 facet brand_id order by count(missed);;

</sphinxql></queries>

</test>
