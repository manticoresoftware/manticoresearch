<?xml version="1.0" encoding="utf-8"?>
<test>

<name>JOIN vs columnar attributes</name>

<requires>
<force-rt/>
<columnar/>
</requires>

<skip_indexer/>

<config>
searchd
{
    <searchd_settings/>
    data_dir = <data_path/>
}
</config>

<queries>
<sphinxql>
CREATE TABLE users (id bigint, name text, surname text, email text, reg_date timestamp) engine='columnar';
CREATE TABLE orders (id bigint, user_id bigint, name text, description text, price float, order_date timestamp, attr json, region_id int, confirm bool, analogs multi) engine='columnar';
INSERT INTO users (id, name, surname, email, reg_date) VALUES (1, 'Fedor', 'Zaycev', '1@1.com', 1708865549);
INSERT INTO orders (id, user_id, name, description, price, order_date, attr, region_id, confirm, analogs) VALUES (0, 1, 'iPhone', '14Pro', 1500.50, 1708866233, '{"color":"black","size":14}', 178, 'TRUE', (9,11,15));

SELECT id, name FROM users INNER JOIN orders ON users.id=orders.user_id ORDER BY orders.id ASC;

DROP TABLE users;
DROP TABLE orders;

<!-- join on columnar sort-by attribute -->
CREATE TABLE tbl1 engine='columnar';
CREATE TABLE tbl2 (tbl1_id bigint);
INSERT INTO tbl1 VALUES (1);
INSERT INTO tbl2 VALUES (1, 1);

select id from tbl1 join tbl2 on tbl1.id=tbl2.tbl1_id order by id asc;

drop table tbl2;
drop table tbl1;

<!-- create tables with columnar storage -->
create table join1 ( id bigint, title text, string_id integer, tmp string attribute, j json ) engine='columnar';
create table join2 ( id bigint, title text, name string attribute, j json ) engine='columnar';

insert into join1 values (1, 'title1', 1, 'tmp1', '{"a":1,"table":"join1"}');
insert into join1 values (2, 'title2', 2, 'tmp2', '{"b":2,"table":"join1"}');
insert into join1 values (3, 'title3', 3, 'tmp3', '{"c":3,"table":"join1"}');
insert into join1 values (4, 'title4', 4, 'tmp4', '{"d":4,"table":"join1"}');

insert into join2 values (1, 'title1', 'name1', '{"a":1,"table":"join2"}');
insert into join2 values (2, 'title2', 'name2', '{"b":2,"table":"join2"}');
insert into join2 values (3, 'title3', 'name3', '{"b":2,"table":"join2"}');

<!-- mixed filters from left and right tables; columnar storage -->
select * from join1 inner join join2 on join1.string_id = join2.id where join2.name = 'name1' or id=2 order by id asc;

<!-- mixed filters from left and right tables; one filter is json; columnar storage -->
select * from join1 inner join join2 on join1.string_id = join2.id where id=1 or join2.j.b=2 order by id asc;

<!-- cleanup -->
drop table join1;
drop table join2;

create table join1 ( id bigint, title text, string_id integer, tmp string attribute, j json ) engine='columnar';
create table join2 ( id bigint, title text, string_id integer, name string attribute engine='columnar', j json );

insert into join1 values (1, 'title1', 1, 'tmp1', '{"sort":5,"a":1,"table":"join1"}');
insert into join1 values (2, 'title2', 2, 'tmp2', '{"sort":6,"b":2,"table":"join1"}');
insert into join1 values (3, 'title3', 3, 'tmp3', '{"sort":7,"c":3,"table":"join1"}');
insert into join1 values (4, 'title4', 4, 'tmp4', '{"sort":8,"d":4,"table":"join1"}');

insert into join2 values (1, 'title1', 1, 'name1', '{"sort":10,"a":1,"table":"join2"}');
insert into join2 values (2, 'title2', 2, 'name2', '{"sort":5,"b":2,"table":"join2"}');

<!-- mixed filters absent from select list; left join; columnar storage -->
select id from join1 left join join2 on join1.string_id = join2.string_id where join2.name = 'name2';

<!-- mixed filters absent from select list; inner join; columnar storage -->
select id from join1 inner join join2 on join1.string_id = join2.string_id where join2.name = 'name2';

<!-- mixed filters absent from select list; left join; null filter; columnar storage -->
select title, uint(join2.j.sort) as table2, weight() * (j.sort + table2) as test2 from join1 left join join2 on join1.string_id = join2.string_id where join2.name = 'name2' or join2.name is null order by test2 desc;

<!-- left join + match from right table -->
select title, join2.title, uint(join2.j.sort) as table2, weight() * (j.sort + table2) as test2 from join1 left join join2 on join1.string_id = join2.string_id where match('title2', join2) order by test2 desc;

<!-- cleanup -->
drop table join1;
drop table join2;

</sphinxql>
</queries>

</test>
