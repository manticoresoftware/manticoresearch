<?xml version="1.0" encoding="utf-8"?>

<test>
<name>json queries via http</name>

<requires>
<http/>
</requires>

<config>
searchd
{
	<searchd_settings/>
	binlog_path =
}

source src1
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, gid, title, content FROM test_table where id&lt;10
  sql_attr_uint   = gid
}

source src2
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, gid, title, content FROM test_table where id&gt;=10
  sql_attr_uint   = gid
}


index test1
{
  source      = src1
  path      = <data_path/>/test_dummy1
}


index test2
{
  source      = src2
  path      = <data_path/>/test_dummy2
}

index test_wf
{
  source    = src1
  path      = <data_path/>/test_dummy_wf
  wordforms = <this_test/>/wordforms.txt
}

index dist2
{
  type	= distributed
  agent	= <my_address/>:test2
}

source src_gr1
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT * FROM test_group1
  sql_attr_uint   = tag
  sql_attr_uint   = gid
}


index test_gr1
{
  source      = src_gr1
  path      = <data_path/>/test_gr1
  stored_fields   = text
}

source src_gr2
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT * FROM test_group2
  sql_attr_uint   = tag
  sql_attr_uint   = gid
}


index test_gr2
{
  source      = src_gr2
  path      = <data_path/>/test_gr2
  stored_fields   = text
}

index dist_gr1
{
  type	= distributed
  agent	= <my_address/>:test_gr1
  agent	= <my_address/>:test_gr2
}

index dist_gr2
{
  type	= distributed
  local	= test_gr1
  local	= test_gr2
}

source src_exc
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, gid, title FROM test_exc
  sql_attr_uint   = gid
}

index test_exc0
{
  source    = src_exc
  path      = <data_path/>/test_exc0
}

index test_exc1
{
  source    = src_exc
  path      = <data_path/>/test_exc1
  exceptions = <this_test/>/exc.txt
}

index T
{
    type = rt
    path = <data_path/>/test_t
}

source src10
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, gid, title, content FROM test_table10
  sql_attr_uint   = gid
}


index test10
{
  source      = src10
  path      = <data_path/>/test_10
  index_field_lengths = 1
}

</config>

<db_drop>drop table if exists test_table</db_drop>
<db_drop>drop table if exists test_group1</db_drop>
<db_drop>drop table if exists test_group2</db_drop>
<db_drop>drop table if exists test_exc</db_drop>
<db_drop>drop table if exists test_table10</db_drop>

<db_create>
create table test_table
(
	id int not null,
	title varchar(255) not null,
	content varchar(255) not null,
	gid int
);
</db_create>

<db_create>
CREATE TABLE `test_group1` (
  `id` int(11),
  `tag` int(11),
  `gid` int(11),
  `text` varchar(255) NOT NULL
)
</db_create>

<db_create>
CREATE TABLE `test_group2` (
  `id` int(11),
  `tag` int(11),
  `gid` int(11),
  `text` varchar(255) NOT NULL
)
</db_create>

<db_create>
create table test_exc
(
	id int not null,
	title varchar(255) not null,
	gid int
);
</db_create>

<db_create>
create table test_table10
(
	id int not null,
	title varchar(255) not null,
	content varchar(255) not null,
	gid int
);
</db_create>


<db_insert>
insert into test_table values
( 1, '1st', 'first',  1 ),
( 2, '2nd', 'second', 2 ),
( 3, '3rd', 'third',  3 ),
( 4, '4th', 'fourth', 4 ),
( 5, '5th', 'fifth',  5 ),
(10, '10th', 'Trevize glanced now and then at Bliss`s face, which seemed entirely concentrated on Bander.', 10 ),
(11, '11th', 'Trevize had grown quite certain he knew what was going on.', 11 ),
(12, '12th', 'Bander, despite its paean to freedom, found this unique opportunity irresistible.', 12 ),
(13, '13th', 'There was no way it could speak to robots on a basis of intellectual equality, and certainly not to animals.', 13 ),
(14, '14th', 'To speak to its fellow-Solarians would be, to it, unpleasant, and what communication there must be would be forced, and never spontaneous.', 14 ),
(15, '15th', 'No wonder, Trevize thought, it was indulging itself in this way.', 15 )
</db_insert>

<db_insert>
INSERT INTO `test_group1` VALUES
( 1, 2, 3, 'test'),
( 2, 2, 2, 'test'),
( 3, 2, 3, 'test'),
( 4, 2, 10, 'test'),
( 5, 2, 9, 'test'),
( 6, 3, 8, 'test'),
( 7, 3, 7, 'test'),
( 8, 3, 6, 'test'),
( 9, 3, 5, 'test'),
( 10, 3, 4, 'test')
</db_insert>

<db_insert>
INSERT INTO `test_group2` VALUES
( 21, 2, 3, 'test'),
( 22, 2, 2, 'test'),
( 23, 2, 3, 'test'),
( 24, 2, 10, 'test'),
( 25, 2, 9, 'test'),
( 26, 3, 8, 'test'),
( 27, 3, 7, 'test'),
( 28, 3, 6, 'test'),
( 29, 3, 5, 'test'),
( 30, 3, 4, 'test')
</db_insert>

<db_insert>
insert into test_exc values
( 1, 'IT Tech', 1 ),
( 2, 'AT Tech', 2 )
</db_insert>

<db_insert>
insert into test_table10 values
(15, '15th', 'No wonder, Trevize thought, it was indulging itself in this way.', 15 ),
(16, '', 'No wonder, Trevize thought, it was indulging itself in this way.', 16 )
</db_insert>

<queries>
<!-- simple match query -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "first" } } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content,title": "1st second" } } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content, title": "1st second" } } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "3rd fourth" } } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "title": "3rd fourth" } } } }</query>

<!-- old sphinx field syntax -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "*": "3rd fourth" } } } }</query>

<!-- new sphinx field syntax -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "_all": "3rd fourth" } } } }</query>

<!-- fullscan/match_all -->
<query endpoint="json/search">{ "table": "test1", "query": { "match_all": {} } } }</query>

<!-- index expansion -->
<query endpoint="json/search">{ "table": "*", "query": { "match": { "_all": "first thought" } } } }</query>
<query endpoint="json/search">{ "table": "_all", "query": { "match": { "_all": "first thought" } } } }</query>

<!-- match with options -->
<query endpoint="json/search">{ "table": "test2", "query": { "match": { "content,title": { "query":"glanced on", "operator":"and" } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "match": { "content,title": { "query":"glanced on", "operator":"or" } } } }</query>

<!-- bool queries -->
<!-- "must" -->
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "must" : { "match" : { "_all" : "on" } } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "must" : { "match" : { "_all" : "to" } } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "must": [ { "match" : { "_all" : "to" } }, { "match" : { "_all" : "on" } } ] } } }</query>

<!-- "should" -->
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "should" : { "match" : { "_all" : "glanced" } } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "should" : { "match" : { "_all" : "despite" } } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "bool" : { "should": [ { "match" : { "_all" : "glanced " } }, { "match" : { "_all" : "despite" } } ] } } }</query>

<!-- "must+must_not" -->
<query endpoint="json/search">{ "table": "test2", "query": { "bool": { "must": { "match" : { "_all" : "glanced grown paean" } },	"must_not":	{ "match" : { "_all" : "irresistible" } } } } }</query>
<query endpoint="json/search">{ "table": "test2", "query": { "bool": { "must": { "match" : { "_all" : "glanced grown paean" } }, "must_not": [ { "match" : { "_all" : "irresistible" } }, { "match" : { "_all" : "certain" } } ] } } }</query>

<!-- must+should -->
<query endpoint="json/search">{ "table": "test2", "query": { "bool": { "must": { "match" : { "_all" : "glanced grown" } }, "should": { "match" : { "_all" : "paean" } } } } }</query>

<!-- phrase -->
<query endpoint="json/search">
{
  "table":"test2",
  "query":
  {
	"match_phrase": { "_all" : "had grown quite" }
  }
}
</query>

<query endpoint="json/search">
{
  "table":"test2",
  "query":
  {
	"match_phrase": { "_all" : "had grown not quite" }
  }
}
</query>

<!-- distributed -->
<query endpoint="json/search">
{
  "table":"dist2",
  "query":
  {
	"match_phrase": { "_all" : "had grown quite" }
  }
}
</query>

<query endpoint="json/search">
{
  "table":"dist2",
  "query": { "match_all": {} }
}
</query>

<query endpoint="json/search">
{
  "table":"dist2"
}
</query>

<!-- query_string, mixed QL and JSON -->
<query endpoint="json/search">
{
  "table": "test1",
  "query":
  {
    "match": { "_all": "3rd fourth" } }
  }
}
</query>

<query endpoint="json/search">
{
  "table": "test1",
  "query":
  {
    "query_string": "3rd | fourth"
  }
}
</query>

<!-- query_string vs bool queries -->
<query endpoint="json/search">
{
  "table": "test1",
  "query":
  {
    "bool" :
    {
      "must":
      [
        { "query_string": "3rd | fourth" },
        { "query_string": "4th" }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "table": "test1",
  "query":
  {
    "bool" :
    {
      "must": { "query_string": "3rd | fourth" },
      "must_not": { "query_string": "fourth" }
    }
  }
}
</query>

<query endpoint="json/search">{ "table": "test_gr1", "aggs":{ "gr_small": { "terms": { "field": "gid" } }, "gr_tag": { "terms": { "field": "tag" } }} }</query>
<query endpoint="json/search">{ "table": "dist_gr1", "aggs":{ "gr_small": { "terms": { "field": "gid" } }, "gr_tag": { "terms": { "field": "tag" } }} }</query>
<query endpoint="json/search">{ "table": "test_gr1", "aggs":{ "gr_small": { "terms": { "field": "gid" } }, "gr_tag": { "terms": { "field": "tag" } }, "gr_dup": { "terms": { "field": "tag" } }} }</query>
<query endpoint="json/search">{ "table": "dist_gr1", "aggs":{ "gr_small": { "terms": { "field": "gid" } }, "gr_tag": { "terms": { "field": "tag" } }, "gr_dup": { "terms": { "field": "tag" } }} }</query>

<!-- facets with offset/limit -->
<query endpoint="json/search">{ "table": "test_gr1", "offset":4, "limit":3, "aggs":{ "gr_small": { "terms": { "field": "gid", "size": 3 } }, "gr_tag": { "terms": { "field": "tag", "size": 3 } }} }</query>

<!-- regression stored field missed at facet -->
<query endpoint="json/search">{ "table": "dist_gr2", "aggs":{ "gr_small": { "terms": { "field": "gid" } }, "gr_tag": { "terms": { "field": "tag" } }} }</query>

<query endpoint="json/search">{"table":"test_wf","query":{"match":{"content":"quite"}}}</query>

<query endpoint="json/search">
{
  "table": "test1",
  "query": { "match": { "_all": "3rd fourth" } },
  "options":
  {
    "agent_query_timeout": 100,
    "boolean_simplify": 1,
    "comment": "comment here",
    "cutoff": 1000,
    "expand_keywords": 1,
    "field_weights":
    {
        "title": 10,
        "content": 3
    },
    "global_idf": 1,
    "idf": "normalized, tfidf_normalized",
	"index_weights":
    {
        "test1": 1,
        "test2": 2
    },
    "local_df": 0,
    "low_priority": 0,
    "max_matches": 1000,
    "max_query_time": 100,
    "max_predicted_time": 100,
    "morphology": "none",
    "not_terms_only_allowed": 1,
    "ranker": "expr('sum(lcs*user_weight)*1000+bm25')",
    "rand_seed": 1234,
    "retry_count": 5,
    "retry_delay": 100,
    "sort_method": "kbuffer",
    "threads": 10
  }
}
</query>


<sphinxql>
<!-- regression stored field missed at facet -->
select * from test_gr1 facet gid facet tag;;
select * from dist_gr1 facet gid facet tag;;
select * from dist_gr2 facet gid facet tag;;
</sphinxql>

<sphinxql>select * from test_gr1 limit 1 facet gid limit 2 facet tag;</sphinxql>
<query endpoint="sql" method="get">query=select%20%2A%20from%20test_gr1%20limit%201%20facet%20gid%20limit%202%20facet%20tag</query>
<sphinxql>select id from test_gr1 limit 1 facet gid by tag;</sphinxql>
<query endpoint="sql" method="get">query=select%20id%20from%20test_gr1%20limit%201%20facet%20gid%20by%20tag</query>

<!-- regression exception consumes escape char that breaks query parsing-->
<query endpoint="json/search"> { "table": "test_exc1", "query": { "query_string": "IT\\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc1", "query": { "query_string": "IT\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc1", "query": { "query_string": "AT\\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc1", "query": { "query_string": "AT\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc0", "query": { "query_string": "IT\\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc0", "query": { "query_string": "IT\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc0", "query": { "query_string": "AT\\/Tech" } } </query>
<query endpoint="json/search"> { "table": "test_exc0", "query": { "query_string": "AT\/Tech" } } </query>
<sphinxql>select * from test_exc1 WHERE MATCH ( 'IT\\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc1 WHERE MATCH ( 'IT\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc1 WHERE MATCH ( 'AT\\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc1 WHERE MATCH ( 'AT\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc0 WHERE MATCH ( 'IT\\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc0 WHERE MATCH ( 'IT\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc0 WHERE MATCH ( 'AT\\/Tech' ) order by id asc</sphinxql>
<sphinxql>select * from test_exc0 WHERE MATCH ( 'AT\/Tech' ) order by id asc</sphinxql>

<!-- facets with offset/limit -->
<!-- FIXME!!! SphinxQL and HTTP beahavior is different -->
<sphinxql>select * from test_gr1 limit 5,1 facet tag limit 2 facet gid;</sphinxql>
<query endpoint="json/search">{ "table": "test_gr1", "offset":5, "limit":1, "aggs":{ "gr_small": { "terms": { "field": "tag", "size": 2 } }, "gr_tag": { "terms": { "field": "gid" } }} }</query>

<!-- facets with sort per aggregate -->
<query endpoint="json/search">{ "table": "test_gr1", "aggs":{ "gr_desc": { "terms": { "field": "gid" }, "sort":[{"gid":{"order":"desc"}}, {"tag":{"order":"desc"}}] }, "gr_asc": { "terms": { "field": "gid" }, "sort":[{"gid":{"order":"asc"}}]}} }</query>

<!-- crash on cleanup parsed query after parse error -->
<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "_all": "abc"
          }
        },
        {
          "bool": {
            "should": [
              {
                "match": {
                  "title": "title smth",
                  "operator": "and"
                }
              },
              {
                "match": {
                  "title": "title2 smth",
                  "operator": "and"
                }
              }
            ]
          }
        }
      ]
    }
  }
}
</query>

<!-- case sensitive table names -->
<query endpoint="json/search">
{
  "table": "T"
}
</query>

<query endpoint="json/search">
{
  "table": "t"
}
</query>

<!-- error on mix of full-text with filters -->
<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "bool": {
      "should": [
        { "match": {"_all":"white"} },
        { "range": { "id": { "lt": 10 } } }
      ]
    }
  }
}
</query>

<!-- error on multiple full-texts at the root node without the bool node -->
<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "match": { "*": "a" },
    "query_string": "b"
  }
}
</query>

<!-- error on multiple filters at the root node without the bool node -->
<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "equals": { "gid": 1 },
    "in": { "gid": [2] }
  }
}
</query>

<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "query_string": "b",
    "equals": { "gid": 1 },
    "in": { "gid": [2] }
  }
}
</query>

<query endpoint="json/search">
{
  "table": "test1",
  "query": {
    "match": { "*": "a" },
    "query_string": "b",
    "equals": { "gid": 1 }
  }
}
</query>

<query endpoint="json/search">
{
  "table": "test10",
  "query":{
    "bool":{
      "filter":[ {
          "bool":{
            "should":[
                { "bool":{
                  "must":[ { "term" : { "content" : "in" } } ],
                  "must_not":[ { "exists" : { "field" : "title" } } ]
                }
              } ]
  } } ] } }
}
</query>

<query endpoint="json/search">
{
  "table": "test10",
  "query":{
    "bool":{
      "filter":[
        {
          "bool":{
            "should":[
              {
                "bool":{
                  "must":[
                    {
                      "term":{
                        "content":"in"
                      }
                    }
                  ],
                  "must_not":[
                    {
                      "exists":{
                        "field":"title"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}
</query>

<!-- facets with sort defined as order property at aggregate bucket -->
<query endpoint="json/search">{ "table": "test_gr1", "size":0, "aggs":{ "gr_desc": { "terms": { "field": "gid", "size": 5, "order": {"gid" : "asc"} } } } }</query>

<!-- facets with sort but the wrong order -->
<query endpoint="json/search">{ "table": "test_gr1", "size":0, "aggs":{ "gr_desc": { "sort":[{"gid":{"order":"asc"}}], "terms": { "field": "gid", "size": 5 }}}}</query>

/* error on mix of full-text with filters with long error path */
<query endpoint="json/search">
{
  "table":"test1",
  "query":{
    "bool":{
      "must":[
        {
          "bool":{
            "should":[
              { "match":{ "_all":"white" } },
              { "range":{ "id":{ "lt":10 } }
              }
            ]
          }
        }
      ]
    }
  }
}
</query>

<!-- error on full-text vs filter order -->
<query endpoint="json/search">
{
  "table": "test2",
  "query": {
    "equals": { "gid": 11 },
    "match": { "*": "on" }
  }
}
</query>
<query endpoint="json/search">
{
  "table": "test2",
  "query": {
    "match": { "*": "on" },
    "equals": { "gid": 11 }
  }
}
</query>

<!-- boost at JSON queries -->
<query endpoint="json/search">
{
  "table":"test2",
  "query":{
    "bool":{
      "should":[
        {
          "match":{
            "_all":"glanced now"
          }
        },
        {
          "match":{
            "_all":{
              "query":"despite",
              "boost":50
            }
          }
        }
      ]
    }
  }
}
</query>

<!-- docvalue_fields with date_time format to emulate es timestamp microseconds scale  -->
<query endpoint="search">{ "table": "test_gr1", "size":0, "aggs":{ "gr_small": { "terms": { "field": "gid", "size":5 } }} }</query>
<query endpoint="test_gr1/_search">{ "size":0, "aggs":{ "gr_small": { "terms": { "field": "gid", "size":5 } }} }</query>
<query endpoint="test_gr1/_search">{ "size":0, "aggs":{ "gr_small": { "terms": { "field": "gid", "size":5 } }}, "docvalue_fields": [ { "field": "gid", "format": "date_time" }] }</query>

<!-- facet with distinct via sql endpoint and http encoded result -->
<sphinxql>select * from test_gr1 limit 0 facet tag distinct gid limit 10;</sphinxql>
<query endpoint="sql">select * from test_gr1 limit 0 facet tag distinct gid limit 10;</query>

</queries>
</test>
