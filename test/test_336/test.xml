<?xml version="1.0" encoding="utf-8"?>

<test>
<name>json queries vs filters</name>

<requires>
<http/>
</requires>

<config>
searchd
{
	<searchd_settings/>
	binlog_path =
    collation_server = libc_cs	
}

source src1
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, int_col, flt_col, attr_lat, attr_lon, str_col, content FROM test_table
  sql_attr_uint  = int_col
  sql_attr_float = flt_col
  sql_attr_float = attr_lat
  sql_attr_float = attr_lon
  sql_attr_string = str_col
}

index test1
{
  source      = src1
  path      = <data_path/>/test_dummy1
}

index test_rt
{
    type = rt
    path = <data_path/>/rt
    rt_field = title
	rt_field = content
    rt_attr_uint = int_col
	rt_attr_float = flt_col
	rt_attr_string = str_col
}

index test_bigint
{
    type = rt
    path = <data_path/>/test_bigint
    rt_field = title
    rt_attr_bigint = icol
}

source test_mva
{
	type				= mysql
	<sql_settings/>
	sql_query			= select * from test_mva
	sql_attr_multi		= uint tags from field
}

index test_mva
{
	source				= test_mva
	path				= <data_path/>/test_mva
}

index test_rt1
{
    type = rt
    path = <data_path/>/rt1
    rt_field = title
	rt_attr_string = str_col
}

</config>

<db_drop>drop table if exists test_table</db_drop>

<db_create>
create table test_table
(
	id int not null,
	title varchar(255) not null,
	content varchar(255) not null,
   	str_col varchar(255) not null,
	int_col int,
	flt_col float,
	attr_lat float,
	attr_lon float
)
</db_create>

<db_insert>
insert into test_table values
(1, '1st', 'Trevize glanced now and then at Bliss`s face, which seemed entirely concentrated on Bander.', 'str1', 11, 1.1, 51, 0 ),
(2, '2nd', 'Trevize had grown quite certain he knew what was going on.', 'str2', 12, 1.2, 46, 2 ),
(3, '3rd', 'Bander, despite its paean to freedom, found this unique opportunity irresistible.', 'str3', 13, 1.3, 51, 18 ),
(4, '4th', 'There was no way it could speak to robots on a basis of intellectual equality, and certainly not to animals.', 'str4', 14, 1.4, 39, 22 ),
(5, '5th', 'To speak to its fellow-Solarians would be, to it, unpleasant, and what communication there must be would be forced, and never spontaneous.', 'str5', 15, 1.5, 41, 12 ),
(6, '6th', 'No wonder, Trevize thought, it was indulging itself in this way.', 'str6', 16, 1.6, 61, 11 )
</db_insert>

<db_create>
CREATE TABLE test_mva
(
	id INTEGER PRIMARY KEY NOT NULL,
	tags VARCHAR(255) NOT NULL,
	title VARCHAR(255) NOT NULL
);
</db_create>
<db_drop>DROP TABLE IF EXISTS test_mva;</db_drop>
<db_insert>INSERT INTO test_mva VALUES
	( 1, '1,3,5,7', 'test one' ),
	( 2, '6,4,2', 'test two' ),
	( 3, '15',  'test three' ),
	( 4, '4,40', 'test four ')
</db_insert>

<metaindex name='META:all'>
<index>test1</index>
<index>test_rt</index>
</metaindex>

<queries><sphinxql>
insert into test_rt values (1, '1st', 'Trevize glanced now and then at Bliss\'s face, which seemed entirely concentrated on Bander.', 11, 1.1, 'str1' );
insert into test_rt values (2, '2nd', 'Trevize had grown quite certain he knew what was going on.', 12, 1.2, 'str2' );
insert into test_rt values (3, '3rd', 'Bander, despite its paean to freedom, found this unique opportunity irresistible.', 13, 1.3, 'str3' );
insert into test_rt values (4, '4th', 'There was no way it could speak to robots on a basis of intellectual equality, and certainly not to animals.', 14, 1.4, 'str4' );
insert into test_rt values (5, '5th', 'To speak to its fellow-Solarians would be, to it, unpleasant, and what communication there must be would be forced, and never spontaneous.', 15, 1.5, 'str5' );
insert into test_rt values (6, '6th', 'No wonder, Trevize thought, it was indulging itself in this way.', 16, 1.6, 'str6' );
insert into test_rt1 values (101, '101th', 'STR' ), (102, '102th', 'str' );
</sphinxql>
<sphinxql>insert into test_bigint values (2333444556, '1st', 2333444556 ), (2333444554, '2nd', 2333444554 ), (140739821799884, '3d', 140739821799884 )</sphinxql>
</queries>

<httpqueries>
<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "lt": 13 } } }
      ]
    }
  }
}
</query>
<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "gt": 13 } } }
      ]
    }
  }
}
</query>
<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "gt": 14, "lt": 16 } } }
      ]
    }
  }
}
</query>
<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "gte": 14 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "lte": 14 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match": {"_all":"on to it"} },
        { "range": { "int_col": { "lt": 14, "gte": 12 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
        { "range": { "int_col": { "lt": 14, "gte": 12 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "range": { "int_col": { "lte": 11 } }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
        { "range": { "int_col": { "lte": 11 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
		{ "match_all": {} },
        { "range": { "int_col": { "lte": 11 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must_not":
      [
        { "range": { "int_col": { "lte": 11 } } },
		{ "range": { "int_col": { "gte": 13 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "should":
      [
        { "range": { "int_col": { "lt": 11 } } },
		{ "range": { "int_col": { "gt": 13 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
        { "range": { "flt_col": { "gt": 1.25 } } },
		{ "range": { "flt_col": { "lt": 1.45 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
	"equals": { "int_col": 12 }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
	"equals": { "str_col": "str6" }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "should":
      [
        { "equals": { "int_col": 11 } },
		{ "equals": { "int_col": 13 } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "in": { "int_col": [11,13] }
  }
}
</query>


<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "in": { "str_col": ["str4","str5"] }
  }
}
</query>

<!-- regression all any MVA -->
<query endpoint="json/search">
{
  "index":"test_mva",
  "query": { "equals": { "any(tags)": 1 } }
}
</query>
<query endpoint="json/search">
{
  "index":"test_mva",
  "query": { "equals": { "all(tags)": 15 } }
}
</query>

<query endpoint="json/search">
{
  "index":"test_mva",
  "query":
  {
    "bool":
    {
      "must_not":
      [
         { "equals": { "all(tags)": 15 } }
      ]
    }
  }
}
</query>
<query endpoint="json/search">
{
  "index":"test_mva",
  "query": { "in": { "any(tags)": [2,1,3] } }
}
</query>
<query endpoint="json/search">
{
  "index":"test_mva",
  "query": { "in": { "all(tags)": [4,3,40] } }
}
</query>

<query endpoint="json/search">
{
  "index":"META:all",
  "query":
  {
    "bool":
    {
      "must":
      [
        { "range": { "flt_col": { "gte": 1.5, "lte": 2 } } }
      ]
    }
  }
}
</query>

<query endpoint="json/search">
{ "index":"test_bigint", "query": { "bool": { "must": [ { "range": { "id": { "gt": 2333444555 } } } ] } } }
</query>

<query endpoint="json/search">
{ "index":"test_bigint", "query": { "bool": { "must": [ { "range": { "id": { "lt": 2333444555 } } } ] } } }
</query>

<query endpoint="json/search">
{ "index":"test_bigint", "query": { "bool": { "must": [ { "range": { "id": { "gt": 140739821799883 } } } ] } } }
</query>

<query endpoint="json/search">
{ "index":"test_bigint", "query": { "bool": { "must": [ { "range": { "id": { "lt": 140739821799885 } } } ] } } }
</query>

<!-- regression filter collation -->
<query endpoint="json/search">
{ "index":"test_rt1", "query": { "equals": {  "str_col": "str" } } }
</query>
<query endpoint="json/search">
{ "index":"test_rt1", "query": { "equals": {  "str_col": "STR" } } }
</query>

<!-- lt lte gt gte vaiants of string comparsions -->
<query endpoint="json/search">{ "index":"test1", "_source": { "includes":["id", "str_col"] }, "query": { "range": { "str_col": {"lt":"str2" } } } }</query>
<query endpoint="json/search">{ "index":"test1", "_source": { "includes":["id", "str_col"] }, "query": { "range": { "str_col": {"lte":"str1" } } } }</query>
<query endpoint="json/search">{ "index":"test1", "_source": { "includes":["id", "str_col"] }, "query": { "range": { "str_col": {"gt":"str5" } } } }</query>
<query endpoint="json/search">{ "index":"test1", "_source": { "includes":["id", "str_col"] }, "query": { "range": { "str_col": {"gte":"str5" } } } }</query>
<query endpoint="json/search">{ "index":"test1", "_source": { "includes":["id", "str_col"] }, "query": { "range": { "str_col": {"gte":"str2", "lt":"str5" } } } }</query>

</httpqueries>

</test>
