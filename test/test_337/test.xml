<?xml version="1.0" encoding="utf-8"?>

<test>
<name>json queries with highlights</name>

<requires>
<http/>
</requires>

<config>
searchd
{
	<searchd_settings/>
	binlog_path =
}

source src1
{
  type      = mysql
  <sql_settings/>
  sql_query     = SELECT id, gid, title, content FROM test_table
  sql_attr_uint   = gid
}


index test1
{
  source      = src1
  path      = <data_path/>/test_dummy1
  stored_fields = title, content
}

index test2
{
  source      = src1
  path      = <data_path/>/test2
  stored_fields = title, content
  min_prefix_len = 3
}

index test3_nostored
{
  source      = src1
  path      = <data_path/>/test3
  min_prefix_len = 3
  stored_fields =
}

</config>

<db_drop>drop table if exists test_table</db_drop>

<db_create>
create table test_table
(
	id int not null,
	title varchar(255) not null,
	content varchar(1024) not null,
	gid int
);
</db_create>

<db_insert>
insert into test_table values
( 1, '1st it was indulging itself in this way', 'first now and then at Bliss`s face',  1 ),
( 2, '2nd No wonder', 'second he knew what was going on.', 2 ),
( 3, '3rd To speak to its fellow-Solarians would be, to it', 'third its paean to freedom',  3 ),
( 4, '4th was no way it could speak to ', 'fourth was no way it could speak to robots on a basis of ', 4 ),
( 5, '5th  its paean to freedom', 'fifth it was indulging itself in this way',  5 ),
(10, '10th he knew what was going on', 'Trevize glanced now and then at Bliss`s face, which seemed entirely concentrated on Bander.', 10 ),
(11, '11th  it was indulging itself in this way', 'Trevize had grown quite certain he knew what was going on.', 11 ),
(12, '12th  was no way it could speak to ', 'Bander, despite its paean to freedom, found this unique opportunity irresistible.', 12 ),
(13, '13th third its paean to', 'There was no way it could speak to robots on a basis of intellectual equality, and certainly not to animals.', 13 ),
(14, '14th what was going on', 'To speak to its fellow-Solarians would be, to it, unpleasant, and what communication there must be would be forced, and never spontaneous.', 14 ),
(15, '15th and then at Bliss`s face', 'No wonder, Trevize thought, it was indulging itself in this way.', 15 ),
(16, '16th', 'Bliss, presumably, was working on the supposition that if Bander spoke enough, it might tell them something useful concerning Earth. That made sense to Trevize, so that even if he had not been truly curious about the subject under discussion, he would nevertheless have endeavored to continue the conversation.', 16 )
</db_insert>

<httpqueries>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ] } } }</query>
<!-- different match and highlight queries -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "highlight_query": { "match": { "_all":"on and not to be it first"} } } } }</query>
<!-- allow empty -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "no_match_size": 0 } } }</query>
<!-- passages -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "highlight_query": { "match": { "_all":"on and not to be it first"} } } } }</query>
<!-- passages weight sorted-->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "highlight_query": { "match": { "_all":"on and not to be it first"} }, "order": "score" } } }</query>
<!-- custom tags -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content" ], "pre_tags":"*before_", "post_tags":"_after+" } } }</query>

<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [] } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": {} } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "presumably spoke useful continue discussion" } }, "highlight": {} } }</query>

<!-- sphinx-style options -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [], "before_match":"[BEFORE]", "after_match":"[AFTER]" } } }</query>

<!-- crash on highlight of wildcard index --> 
<query endpoint="json/search">{ "table": "test2", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ] } } }</query>

<!-- crash on empty highlight --> 
<query endpoint="json/search">{ "table": "test3_nostored", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [] } } } }</query>

<!-- highlighting via script_fields -->
<query endpoint="json/search">{ "table":"test1", "query": { "query_string":"itself" }, "limit":1, "cutoff":0, "highlight":{ "fields": [ "title", "content" ] }, "script_fields":{ "title_h":{ "script":{ "inline":"highlight({},'title')" } } }, "_source":{"includes":["title", "content", "title_h" ] } }</query>

<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" }, "equals" : {"id":14 } }, "highlight": { "fields": { "title":{}, "content":{ "limit":50 } } } } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" }, "equals" : {"id":14 } }, "highlight": { "fields": { "title":{}, "content":{ "limit":25 } } } } }</query>

<!-- assert at daemon with missed query field at highlight -->
<query endpoint="json/search">{ "table": "test1", "source": { "includes":"" }, "highlight": {} }</query>

<!-- wrong error message for bool option -->
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "limits_per_field":0 } }</query>
<query endpoint="json/search">{ "table": "test1", "query": { "match": { "content": "and first" } }, "highlight": { "fields": [ "content", "title" ], "limits_per_field":false } }</query>

<!-- crash at daemon with error on parsing query with highlight -->
<query endpoint="json/search">{ "table": "test1", "highlight":{"fields":["content"],"html_strip_mode":"strip"},"query":{"bool":{"must":[{"query_string":"error"}]}} }</query>
<query endpoint="json/search">{ "table": "test1", "highlight":{"fields":["content"],"html_strip_mode":"strip123"},"query":{"bool":{"must":[{"query_string":"error"}]}} }</query>

</httpqueries>

</test>
