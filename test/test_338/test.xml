<?xml version="1.0" encoding="utf-8"?>

<test>
<name>json queries: insert, delete, replace</name>

<skip_indexer/>

<requires>
<http/>
</requires>

<config>
searchd
{
	<searchd_settings/>
	binlog_path =
}

index test_rt
{
    type = rt
    path = <data_path/>/rt
    rt_field = title
	rt_field = content
    rt_attr_uint = int_col
	rt_attr_bigint = bint_col
	rt_attr_float = flt_col
	rt_attr_multi = mva_col
	rt_attr_json = json_col
	rt_attr_string = title
}

index test_vec
{
    type = rt
    path = <data_path/>/test_vec
    rt_field = title
	rt_attr_float_vector = vec
}
</config>

<httpqueries>

<!-- inserts -->
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":1,
	"doc":
	{
		"bint_col" : 1556004428,
	    "int_col" : 1,
		"flt_col" : 1.1,
		"mva_col" : [1,2,3,4,5],
		"json_col":
		{
			"string": "name1",
		    "int"   : 1,
			"array" : [100,200],
		    "object": {}
		},
	    "content" : "document one"
	}
}
</query>

<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":2,
	"doc":
	{
	    "int_col" : 2,
	    "flt_col" : 2.2,
		"json_col": "{\"string\":\"name2\",\"int\":2,\"array\":[300,400],\"object\":{}}",
	    "content" : "document two"
	}
}
</query>

<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":3,
	"doc":
	{
	    "int_col" : 3,
	    "flt_col" : 3.3,
	    "content" : "document three"
	}
}
</query>

<!-- fullscan -->
<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- fulltext -->
<query endpoint="json/search">{ "index": "test_rt", "query": { "match": { "*": "one" } } } }</query>
<query endpoint="json/search">{ "index": "test_rt", "query": { "match": { "*": "two three" } } } }</query>

<!-- filter by json attr -->
<query endpoint="json/search">{ "index": "test_rt", "query": { "range": { "json_col.int": { "lte": 1 } } } }</query>
<query endpoint="json/search">{ "index": "test_rt", "query": { "range": { "json_col.int": { "gte": 2 } } } }</query>

<!-- "create"=="insert" -->
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":3
}
</query>

<query endpoint="json/create">
{
	"index":"test_rt",
	"id":3
}
</query>

<!-- "index"=="replace" -->
<query endpoint="json/replace">
{
	"index":"test_rt",
	"id":3,
	"doc":
	{
	    "int_col" : 33,
	    "flt_col" : 33.3,
	    "content" : "document three (replaced)"
	}
}
</query>

<query endpoint="json/index">
{
	"index":"test_rt",
	"id":4,
	"doc":
	{
	    "int_col" : 44,
	    "flt_col" : 44.4,
	    "content" : "document four (replaced)"
	}
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match": { "*": "replaced" } } } }</query>

<!-- update -->
<query endpoint="json/update">
{
	"index":"test_rt",
	"id":3,
	"doc":
	{
	    "int_col" : 333,
	    "flt_col" : 333.3
	}
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- update json -->
<query endpoint="json/update">
{
	"index":"test_rt",
	"id":1,
	"doc":
	{
	    "json_col.int" : 111
	}
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- delete -->
<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":3
}
</query>

<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":4
}
</query>

<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":4
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- update-by-query -->
<query endpoint="json/search">
{
	"index":"test_rt",
	"query":{ "range": { "int_col": { "lte": 1 } } }
}
</query>

<query endpoint="json/update">
{
	"index":"test_rt",
	"doc":
	{
	    "int_col" : 100,
	    "flt_col" : 100.100
	},

	"query": { "range": { "int_col": { "lte": 1 } } }
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- use fulltext here -->
<query endpoint="json/search">
{
  "index":"test_rt",
  "query": { "match": { "*": "two" } } }
}
</query>

<query endpoint="json/update">
{
	"index":"test_rt",
	"doc":
	{
	    "int_col" : 200,
	    "flt_col" : 200.200
	},

	"query": { "match": { "*": "two" } } }
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- delete-by-query -->
<query endpoint="json/delete">
{
	"index":"test_rt",
	"query": { "range": { "int_col": { "lte": 100 } } }
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<query endpoint="json/delete">
{
	"index":"test_rt",
	"query": { "match": { "*": "two" } } }
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- full string/json updates -->
<query endpoint="json/create">
{
	"index":"test_rt",
	"id":1,
	"doc":
	{
	    "int_col" : 1,
	    "flt_col" : 1.1,
	    "content" : "document one",
	    "title" : "title of document one"
	}
}
</query>

<query endpoint="json/create">
{
	"index":"test_rt",
	"id":2,
	"doc":
	{
	    "int_col" : 2,
	    "flt_col" : 2.2,
	    "content" : "document two",
	    "title" : "title of document two"
	}
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<query endpoint="json/update">
{
	"index":"test_rt",
	"doc":
	{
	    "title" : "updated title",
	    "json_col" : "{\"array\":[1,2,3]}"
	},

	"query": { "range": { "int_col": { "gte": 1 } } }
}
</query>

<query endpoint="json/search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- regression update for MVA attribute as array and for JSON attribute as object -->
<query endpoint="update">
{
	"index":"test_rt",
	"doc":
	{
		"mva_col" : [101,102,103],
		"json_col" : {"array":[201,202,203]}
	},

	"query": { "range": { "int_col": { "gte": 1 } } }
}
</query>
<query endpoint="search">{ "index": "test_rt", "query": { "match_all": {} } } }</query>

<!-- auto id regression -->
<query endpoint="insert">
{
	"index":"test_rt",
	"doc":
	{
	    "int_col" : 1000,
	    "content" : "document thousand"
	}
}
</query>

<query endpoint="search">{ "index": "test_rt", "query": { "match": { "*": "thousand" } } } }</query>

<query endpoint="insert">
{
	"index":"test_rt",
	"id":1513686608316989453,
	"doc":
	{
		"bint_col" : 1513686608316989453,
	    "content" : "document big"
	}
}
</query>

<query endpoint="search">{ "index": "test_rt", "query": { "match": { "*": "big" } } } }</query>

<!-- inserts of array into JSON and MVA columns -->
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":201,
	"doc":
	{
		"mva_col" : [11,12,13]
	}
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":202,
	"doc":
	{
		"json_col": [21,22,23]
	}
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":203,
	"doc":
	{
		"mva_col" : ["31"]
	}
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":204,
	"doc":
	{
		"json_col": ["31"]
	}
}
</query>
<query endpoint="search">{ "index": "test_rt", "_source": { "includes": [ "id", "mva_col", "json_col" ] }, "query": { "range": { "id": { "gt":200, "lt":300 } } }, "sort": ["id"] }</query>
</httpqueries>

<!-- inserts of array into JSON and MVA columns continue -->
<sphqueries>
<sphinxql>insert into test_rt(id, mva_col) values  (205, '["a"]')</sphinxql>
<sphinxql>insert into test_rt(id, json_col) values (206, '["a"]')</sphinxql>
<sphinxql>SELECT id, mva_col, json_col FROM test_rt WHERE id &gt; 200 and id &lt; 300 order by id asc</sphinxql>
</sphqueries>

<!-- delete by array of ids -->
<httpqueries>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":1001,
	"doc": 	{ "int_col" : 3, "flt_col" : 3.3, "content" : "document three" }
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":1002,
	"doc": 	{ "int_col" : 3, "flt_col" : 3.3, "content" : "document three" }
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":1003,
	"doc": 	{ "int_col" : 3, "flt_col" : 3.3, "content" : "document three" }
}
</query>
<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":[201,202, 204, 1,2]
}
</query>
<query endpoint="search">{ "index": "test_rt", "_source": { "includes": [ "id"] }, "query": { "range": { "id": { "lt":2000 } } }, "sort": ["id"] }</query>
<!-- invalid delete with array of id - only numbers allowed -->
<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":[1001,"1002", 202, 1,2]
}
</query>
<!-- invalid delete id - only numbers allowed -->
<query endpoint="json/delete">
{
	"index":"test_rt",
	"id":"1002"
}
</query>
<!-- inserts of empty array into JSON and MVA columns -->
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":2001,
	"doc":
	{
		"mva_col" : []
	}
}
</query>
<query endpoint="json/insert">
{
	"index":"test_rt",
	"id":2002,
	"doc":
	{
		"json_col": []
	}
}
</query>

<query endpoint="search">{ "index": "test_rt", "_source": { "includes": [ "id", "mva_col", "json_col" ] }, "query": { "range": { "id": { "gt":2000, "lt":3000 } } }, "sort": ["id"] }</query>

<query endpoint="json/insert">
{
	"index":"test_vec",
	"id": 1,
	"doc": 	{ "title" : "doc one", "vec" : [3,2,1] }
}
</query>

<query endpoint="json/insert">
{
	"index":"test_vec",
	"id":2,
	"doc": 	{ "title" : "doc two", "vec" : [30.3,20.2,10.1] }
}
</query>

<query endpoint="json/search">{ "index": "test_vec", "query": { "match_all": {} } }, "sort": ["id"] }</query>

</httpqueries>

</test>
