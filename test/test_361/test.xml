<?xml version="1.0" encoding="utf-8"?>
<test>

<name>IN filter vs expression (incl percolate)</name>

<config>
indexer
{
	mem_limit				= 16M
}

searchd
{
	<searchd_settings/>
}

source test
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table
	sql_attr_uint	= gid
	sql_attr_json	= j
}

index test
{
	source			= test
	path			= <data_path/>/test
}

index pq
{
	type = percolate
	path			= <data_path/>/pq_re
	rt_field 		= title
	rt_attr_json	= j
}

index dist
{
	type			= distributed
	agent			= <my_address/>:test
}

index pq_in
{
	type = percolate
	path			= <data_path/>/pq_in
	rt_field 		= title
	rt_attr_json	= j
}

source j_arrays
{
	type			= mysql
	<sql_settings/>
	sql_query		= SELECT * from j_arrays
	sql_attr_json	= j
}

index arrays
{
	source = j_arrays
	path = <data_path/>/j_arrays
}

index pq_expr
{
	type = percolate
	path			= <data_path/>/pq_expr
	rt_field 		= title
	rt_attr_json	= j
}

source src_coord1
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from coord1_table
	sql_attr_json	= coordinates
}

index coord1
{
	source			= src_coord1
	path			= <data_path/>/coord1
}

</config>

<db_create>
CREATE TABLE `test_table` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `gid` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `j` varchar(8192) NOT NULL,
  PRIMARY KEY (`id`)
);
</db_create>
<db_drop>DROP TABLE IF EXISTS `test_table`;</db_drop>
<db_insert>
INSERT INTO `test_table` VALUES
(1,1,'test one','{"a":5,"b":123}'),
(2,1,'test two','{"a":101,"b":134}')
</db_insert>

<db_create>CREATE TABLE j_arrays ( id INTEGER NOT NULL, gid INTEGER NOT NULL, j VARCHAR(255) NOT NULL )</db_create>
<db_drop>DROP TABLE IF EXISTS `j_arrays`;</db_drop>
<db_insert>
INSERT INTO j_arrays ( id, gid, j ) VALUES
	( 123, 1, '{"a":[1,2,3,4], "t":["t1", "t2", "t3"]}' ),
	( 234, 1, '{"a":[2,3,4,5], "t":["t2", "t3", "t4"]}' ),
	( 345, 2, '{"a":[3,4,5,1], "t":["t3", "t4", "t5"]}' ),
	( 456, 2, '{"a":["4","5","6","2"], "t":["t4", "t5", "t6"]}' )
</db_insert>

<db_create>
CREATE TABLE `coord1_table` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `coordinates` varchar(8192) NOT NULL,
  PRIMARY KEY (`id`)
);
</db_create>
<db_drop>DROP TABLE IF EXISTS `coord1_table`;</db_drop>
<db_insert>
INSERT INTO `coord1_table` VALUES
(1, '[{"latitude":47.425413,"longitude":9.612921,"ort":"9442"},{"latitude":47.425413,"longitude":9.612921,"ort":"9442"}]')
</db_insert>

<queries><sphinxql>
<!-- IN for plain indexes -->
select * from test;
select * from test where j.a IN (5,100);
select *, IN(j.b, 100, 134) as cnd from test where cnd&lt;&gt;0;
select *, j.b IN(100, 134) as cnd from test where cnd&lt;&gt;0;

<!-- IN for distributed indexes -->
select * from dist where j.a IN (5,100);
select *, IN(j.b, 100, 134) as cnd from dist where cnd&lt;&gt;0;
select *, j.b IN(100, 134) as cnd from dist where cnd&lt;&gt;0;

<!-- IN for PQ indexes -->
INSERT INTO pq (query, filters) VALUES ('', 'j.a IN (5, 100)');
INSERT INTO pq (query, filters) VALUES ('', 'IN (j.a, 5, 100)');
INSERT INTO pq (query, filters) VALUES ('', 'j.a IN (5, 100) and CRC32(\'test\')');
INSERT INTO pq (query, filters) VALUES ('', 'IN (j.a, 5, 100) and CRC32(\'test\')');
INSERT INTO pq (query, filters) VALUES ('', 'j.a IN (5, 100) or IN (j.b, 134, 200)');
INSERT INTO pq (query, filters) VALUES ('', 'IN (j.a, 5, 100) or j.b IN (134, 200)');

CALL PQ ('pq', ('{"j":{"a":5, "b":123}}', '{"j":{"a":101, "b":134}}'), 1 as docs, 1 as query);

<!-- crash on IN for plain indexes -->
select *, IN (missed.a,5,100) from test;

<!-- crash on IN with large values -->
INSERT INTO pq_in (query, filters) VALUES ('', '(j.a=5 OR (j.a=6 AND NOT IN(j.b, 1220431865,6663093570)))');
CALL PQ ('pq_in', ('{"j":{"a":5, "b":123}}', '{"j":{"a":6, "b":134}}'), 1 as docs, 1 as query);
select *, in(j.a,1220431865,6663093570) as p from arrays;

<!-- JSON expression -->
INSERT INTO pq_expr (query, filters) VALUES ('', 'abs(j.a)=22');
INSERT INTO pq_expr (query, filters) VALUES ('', 'abs(j.a)=12');
CALL PQ ('pq_expr', ('{"j":{"a":-12, "b":123}}', '{"j":{"a":22, "b":134}}'), 1 as docs, 1 as query);

INSERT INTO pq_expr (query, filters) VALUES ('', 'GEODIST(j.lat, j.lon,0.937717,-0.0798578, {in=radians, out=m} )&lt;100000');
CALL PQ ('pq_expr', ('{"j":{"lon":-0.0798578, "lat":0.937717}}', '{"j":{"lon":-0.0799989, "lat":0.891975}}', '{"j":{"some":"thing"}}', '{"j":{"lon":-0.0721455, "lat":0.926761}}'), 1 as docs, 1 as query);

INSERT INTO pq_expr (query, filters) VALUES ('', 'CONTAINS(POLY2D(j.poly), 2, 3)');
CALL PQ ('pq_expr', ('{"j":{"poly":"1,2,3,4,5,6.0"}}', '{"j":{"poly":"1,-2,1,2,-5,6"}}', '{"j":{"poly":"-1,2,12,4,5,6"}}'), 1 as docs, 1 as query);

<!-- regression crash at IN to JSON attribute -->
select * from test where j IN (5,100);

<!-- regression crash at filter for geodist with JSON attribute and attribute hide -->
SELECT id, coordinates, ANY(GEODIST(47.425413, 9.612921, x.latitude, x.longitude, {in=deg, out=km}) &lt; 5 FOR x IN coordinates) as coordinates_multi FROM coord1 WHERE coordinates_multi = 1;

</sphinxql></queries>
</test>
