<?xml version="1.0" encoding="utf-8"?>
<test>

<name>explain query</name>

<requires>
<re2/>
<lemmatizer_base/>
</requires>

<config>
common
{
	lemmatizer_base	= <local>lemmatizer_base</local>
}

indexer
{
	mem_limit			= 16M
}

searchd
{
	<searchd_settings/>
}

source plain1
{
	type				= mysql
	<sql_settings/>
	sql_query_pre		= set names utf8
	sql_query			= select *, 1 as idd from test_table
	sql_attr_uint		= idd
}

index plain1
{
	source			= plain1
	path			= <data_path/>/plain1
	regexp_filter 	= (blue|red) => color
	stopwords		= <this_test/>/stops.txt
	wordforms		= <this_test/>/wordforms.txt
	morphology		= lemmatize_en_all
}

index rt1
{
	type 			= rt
	path			= <data_path/>/rt1
	rt_mem_limit 	= 8M
	rt_field		= title
	rt_field 		= content
	rt_attr_uint	= idd
	dict 			= keywords
	regexp_filter 	= (blue|red) => color
	stopwords		= <this_test/>/stops.txt
	wordforms		= <this_test/>/wordforms.txt
	morphology		= lemmatize_en_all
}

index pq1
{
	type			= percolate
	path			= <data_path/>/pq1
	rt_field 		= title
	rt_field 		= content
	rt_attr_uint	= idd
	regexp_filter 	= (blue|red) => color	
	stopwords		= <this_test/>/stops.txt
	wordforms		= <this_test/>/wordforms.txt
	morphology		= lemmatize_en_all
}

index tmpl1 : plain1
{
	type = template
	path			= <data_path/>/tmpl1
}

index exp1
{
	source			= plain1
	path			= <data_path/>/exp1
}

</config>

<db_create>
CREATE TABLE test_table
(
	id INTEGER PRIMARY KEY NOT NULL,
	content VARCHAR(255) NOT NULL,
	title VARCHAR(255) NOT NULL
) CHARACTER SET utf8;
</db_create>
<db_drop>DROP TABLE IF EXISTS test_table</db_drop>
<db_insert>SET NAMES utf8</db_insert>
<db_insert>
INSERT INTO test_table VALUES
( 100, 'red baron', 'he runs like me' ),
( 101, 'blue sky','running dog' ),
( 102, 'the box and a toy', 'online color bubles' ),
( 103, 'a black dog is very popular', 'not this time' ),
( 104, 'blue socks and red shoes', 'run in the woods' ),
( 105, 'he told me this', 'like running' )
</db_insert>

<queries><sphinxql>

INSERT INTO rt1 (id, idd, content, title) VALUES
( 100, 12, 'red baron', 'he runs like me' ),
( 101, 12, 'blue sky','running dog' ),
( 102, 12, 'the box and a toy', 'online color bubles' ),
( 103, 12, 'a black dog is very popular', 'not this time' ),
( 104, 12, 'blue socks and red shoes', 'run in the woods' ),
( 105, 12, 'he told me this', 'like running' );

set profiling=1;

SELECT id FROM plain1 WHERE MATCH('red | sky') limit 1;
show plan;
SELECT id FROM rt1 WHERE MATCH('red | sky') limit 1;
show plan;
EXPLAIN QUERY plain1 'red | sky';
EXPLAIN QUERY rt1 'red | sky';
EXPLAIN QUERY pq1 'red | sky';
EXPLAIN QUERY tmpl1 'red | sky';

SELECT id FROM plain1 WHERE MATCH('(running | he ) !dog') limit 1;
show plan;
SELECT id FROM rt1 WHERE MATCH('(running | he ) !dog') limit 1;
show plan;
EXPLAIN QUERY plain1 '(running | he ) !dog';
EXPLAIN QUERY rt1 '(running | he ) !dog';
EXPLAIN QUERY pq1 '(running | he ) !dog';
EXPLAIN QUERY tmpl1 '(running | he ) !dog';


SELECT id FROM plain1 WHERE MATCH('me story telling @title runs') limit 1;
show plan;
EXPLAIN QUERY plain1 'me story telling @title runs';
EXPLAIN QUERY rt1 'me story telling @title runs';
EXPLAIN QUERY pq1 'me story telling @title runs';
EXPLAIN QUERY tmpl1 'me story telling @title runs';

EXPLAIN QUERY plain1 'the box black dog the !cat';
EXPLAIN QUERY rt1 'the box black dog the !cat';
EXPLAIN QUERY pq1 'the box black dog the !cat';
EXPLAIN QUERY tmpl1 'the box black dog the !cat';

EXPLAIN QUERY plain1 'her @!title box @(title,content) with me';
EXPLAIN QUERY rt1 'her @!title box @(title,content) with me';
EXPLAIN QUERY pq1 'her @!title box @(title,content) with me';
EXPLAIN QUERY tmpl1 'her @!title box @(title,content) with me';

<!-- OR inside phrase related operators -->
explain query exp1 ' " ( ( a b c ) | d ) e" ';
explain query exp1 ' " ( ( a b c ) | d ) e"~5 ';
explain query exp1 ' " ( ( a b c ) | d ) e"/2 ';

explain query exp1 ' " e ( ( a b c ) | d )" ';
explain query exp1 ' " e ( ( a b c ) | d )"~5 ';
explain query exp1 ' " e ( ( a b c ) | d )"/2 ';

explain query exp1 ' "dead ( alive | poor ) but all ( ( as good ) | ( as fast ) )" ';
explain query exp1 ' "dead ( alive | poor ) but all ( ( as good ) | ( as fast ) )"~5 ';
explain query exp1 ' "dead ( alive | poor ) but all ( ( as good ) | ( as fast ) )"/3 ';

explain query exp1 ' "( a | b | c | aa | bb ) ( d | e | f | dd ) ( g | h | j | gg ) ( k | m | n | kk ) ( o | p | q | oo )" ';
explain query exp1 ' "( a | b | c | aa | bb ) ( d | e | f | dd ) ( g | h | j | gg ) ( k | m | n | kk ) ( o | p | q | oo )"~5 ';
explain query exp1 ' "( a | b | c | aa | bb ) ( d | e | f | dd ) ( g | h | j | gg ) ( k | m | n | kk ) ( o | p | q | oo )"/3 ';

<!-- the case with just OR terms at the phrase node that transformed to jsut the pure phrase -->
insert into rt1 (id, content) values(1, 'abc'),(2, 'def');
select * from rt1 where match('"(abc|def)"') order by id asc; show meta;
explain query rt1 '"(abc|def)"';

</sphinxql></queries>

</test>
