<?xml version="1.0" encoding="utf-8"?>
<test>

<name>configless</name>

<requires>
	<icu/>
	<force-rt/>
	<columnar/>
</requires>

<skip_indexer/>

<config>
searchd
{
	<searchd_Settings/>
	data_dir = <data_path path="data0"/>
}
</config>

<queries>
<sphinxql example="test configless">
	show tables;
	create table test1 ( title text, tag integer );
	create table test1 ( title text, tag integer, tag2 integer );
	create table if not exists test1 ( title text, tag integer, tag2 integer );
	show tables;

	<!-- testing configless -->
	desc test1;
	insert into test1 values (1,'hello',100);
	insert into test1 values (2,'world',200);
	select * from test1 where match('hello|world');
	show create table test1;
	drop table test1;
	show tables;

	drop table test1;
	drop table if exists test1;

	create table test2 ( title text indexed, body text stored indexed, tag integer, weight float, flags bit(2) );
	desc test2;
	show create table test2;
	insert into test2 values (1,'title','body',100, 1.1, 1);
	select * from test2;
	drop table test2;

	create table if not exists test3 ( title text, tag integer ) stored_fields='title';
	create table if not exists test3 ( title text, tag integer );
	insert into test3 values (1,'walked',100);
	call keywords ('walked', 'test3');
	select * from test3 where match('walk');
	drop table test3;

	create table test4 ( title text, tag integer ) morphology='stem_en';
	insert into test4 values (1,'walked',100);
	call keywords ('walked', 'test4');
	select * from test4 where match('walk');
	show create table test4;
	drop table test4;

	create table test5 ( field1 text indexed, field2 text stored, field3 text stored indexed );
	desc test5;
	show create table test5;
	insert into test5 values (1,'indexed1','stored2','stored3 indexed3');
	select * from test5 where match('indexed1');
	select * from test5 where match('stored2');
	select * from test5 where match('indexed3');
	drop table test5;

	create table pq1 ( title text ) type='pq';
	show tables;
	insert into pq1 (query) values('test');
	insert into pq1 (query) values( 'test | cat' );
	call pq ('pq1', 'test 1', 1 as docs, 0 as docs_json );
	show status like 'command_callpq';

	drop table pq1;

	show tables;
	create table idx(f text) morphology='icu_chinese' charset_table='non-cjk,cjk';
	show tables;
	create table idx(f text) morphology='icu_chinese' charset_table='non_cjk,cjk';
	show tables;
	show create table idx;
	create table idx_clone like idx;
	show create table idx_clone;
	drop table idx_clone;
	drop table idx;

	create table test1 ( title text ) docstore_compression='lz4hc' docstore_block_size='8192' access_plain_attrs='mmap' attr_update_reserve='100M';
	show create table test1;
	create table test2 like test1;
	show create table test2;
	drop table test1;
	drop table test2;

	create table pq1 ( title text ) type='pq';
	show create table pq1;
	create table pq2 like pq1;
	show create table pq2;
	drop table pq1;
	drop table pq2;

	create table test1(title text, price float) charset_table = '0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451';
	show create table test1;
	drop table test1;

	create table test1(title string indexed);
	show create table test1;
	drop table test1;

	create table test1(title text, str_val string attribute);
	show create table test1;
	drop table test1;

	create table test1(title string attribute indexed);
	show create table test1;
	desc test1;
	insert into test1 values(1,'title');
	select * from test1 where match('title');
	drop table test1;

	create table test1(title string attribute stored);
	create table test2(title string attribute indexed stored);
	drop table if exists test1;
	drop table if exists test2;

	<!-- regression percolate index column names -->
	create table pq2 (f text, Abc int) type='percolate';
	insert into pq2 (filters) values('Abc > 5');
	select * from pq2;
	call pq ('pq2', '{"Abc":10}');
	call pq ('pq2', '{"abc":10}');
	drop table pq2;

	create table t(f text) morphology_skip_fields='f' morphology='stem_en' index_exact_words='1';
	show create table t;
	drop table t;

	<!-- regression for empty docstore fields -->
	create table test ( f1 text );
	insert into test (f1) values ('test'), ('test');
	select f1, weight() as w from test;
	drop table test;
	
	<!-- regression crash on create table with empty exceptions -->
	create table test ( f1 text ) exceptions='';
	drop table test;

	<!-- regression for crash on facet by json vs columnar -->
	create table test(pos text, ipaddress json)  min_infix_len='1' engine='columnar';
	insert into test(pos,ipaddress) values ('a','{ data: [\"127.0.0.1\",\"192.168.0.1\"] }'),('b','{ data: [\"127.0.0.2\",\"192.168.0.1\"] }');
	select * from test;
	select * from test facet ipaddress.data order by count(*) desc limit 10;;
	drop table test;

	create table test(pos text, ipaddress json)  min_infix_len='1';
	insert into test(pos,ipaddress) values ('a','{ data: [\"127.0.0.1\",\"192.168.0.1\"] }'),('b','{ data: [\"127.0.0.2\",\"192.168.0.1\"] }');
	select * from test;
	select * from test facet ipaddress.data order by count(*) desc limit 10;;
	drop table test;

	create table t(f text) engine='rowwise';
	show create table t;
	drop table t;

	<!-- regression for group by multiple json values -->
	drop table if exists t;
	create table t(j json, s string);
	insert into t(id,j,s) values(1,'{"a":[]}','s1'),(2,'{"a":["el1","el2"]}','s2'),(3,'{"a":[]}','s2');
	select * from t; select groupby(), count(*), * from t group by j.a,s;
	drop table t;

	<!-- regression for DLL tokens in backticks -->
	create table t1 ( `engine` integer, `soname` integer, `stored` integer, `plugin` integer, `rebuild` integer );
	show create table t1;
	create table t2 like t1;
	show create table t2;
	drop table t1;
	drop table t2;

	<!-- another regression for DLL tokens in backticks -->
	create table t(`text` text);
	show create table t;
	alter table t rt_mem_limit='1G';
	show create table t;
	drop table t;

	<!-- regression for count distinct over empty indexes -->
	create table t1(f text, a int);
	create table t2 like t1;
	select count(distinct a) from t1,t2;
	drop table t1;
	drop table t2;

	<!-- regression for read_buffer_docs vs size syntax -->
	create table t(f text) read_buffer_hits='128k';
	show create table t;
	drop table t;

	create table t(t text, f float_vector);
	show create table t;
	insert into t values (1,'text',(5.5,4.4,5.5));
	insert into t values (2,'text',(1,2,3,4));
	select * from t;
	update t set f=(500,400,300,200) where id=1;
	update t set f=(3.14,2.71) where id=2;
	select * from t;
	drop table t;

	create table t(t text, m multi);
	insert into t values (1,'text',(5.5,4.4,5.5));
	show meta;
	select * from t;
	drop table t;

	<!-- regression for a crash on buffer overflow -->
	create table test(f1 string attribute);
	insert into test (f1) values ('ООО "МНОГОПРОФИЛЬНЫЙ ЦЕНТР ЭКСПЕРТИЗ И ИССЛЕДОВАНИЯ ДОКУМЕНТА "ГАРАНТ"');
	SELECT LEVENSHTEIN('ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ ЦЕНТР ЭКСПЕРТИЗ', f1, {normalize=1,length_delta=24}) as lev FROM test;
	drop table test;

	<!-- regression for incorrect total_relation with facet and cutoff -->
	create table t(a int);
	insert into t(a) values(1),(2);
	select * from t option cutoff=1 facet a;;
	show meta;
	drop table t;
</sphinxql>
</queries>

</test>