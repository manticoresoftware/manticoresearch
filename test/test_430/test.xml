<?xml version="1.0" encoding="utf-8"?>
<test>

<name>columnar attributes</name>

<requires>
<columnar/>
<non-rt/>
</requires>

<config>
indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
}

source test
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table

	sql_attr_uint     = price
	sql_attr_bigint   = brand_id
	sql_field_string  = title
	sql_attr_string   = brand_name
	sql_field_string  = property
	sql_attr_multi    = uint categories from field
	sql_attr_json     = j
	sql_attr_float    = coeff
}

index test
{
	source			= test
	path			= <data_path/>/test
}

index test_col
{
	source 			= test
	path			= <data_path/>/test_col

	columnar_attrs 	= price, brand_id, title, brand_name, property
}

index test_col2
{
	source 			= test
	path			= <data_path/>/test_col2

	columnar_attrs 	= price, brand_id, title, brand_name, property
}

index test_dist
{
	type = distributed
	local = test_col
	local = test_col2
}


index pq1
{
	type			= percolate
	path			= <data_path/>/pq1
	rt_field 		= title
	rt_attr_uint	= gid
}
</config>

<db_create>
CREATE TABLE `test_table` (
  `id` int(11),
  `price` int(11),
  `brand_id` int(11),
  `title` varchar(255),
  `brand_name` varchar(255),
  `property` varchar(255),
  `categories` varchar(255),
  `j` varchar(255),
  `coeff` float
);
</db_create>

<db_drop>DROP TABLE IF EXISTS test_table;</db_drop>

<db_insert>insert into test_table (id,price,brand_id,title,brand_name,property,categories,j,coeff) values
(1001,529,9,'Product Five Two','Brand Nine','Four','(13,14)','{x:[13,14],a:["a13","a14"]}',1.0),
(1002,173,10,'Product Five Seven','Brand Ten','Four','(10)','{x:[10],a:["a10"]}',2.0),
(1003,121,1,'Product Seven Nine','Brand One','Five','(13,14,15)','{x:[13,14,15],a:["a13","a14","a15"]}',1.0),
(1004,474,7,'Product Ten Three','Brand Seven','Nine','(10,11,12)','{x:[10,11,12],a:["a10","a11","a12"]}',0.0),
(1005,20,7,'Product Ten Four','Brand Seven','Seven','(13)','{x:[13],a:["a13"]}',1.0),
(1006,100,3,'Product One Three','Brand Three','Seven','(10)','{x:[10],a:["a10"]}',2.0),
(1007,724,9,'Product Four Eight','Brand Nine','Five','(11,12,13)','{x:[11,12,13],a:["a11","a12","a13"]}',0.0),
(1008,13,3,'Product Seven One','Brand Three','Eight','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}',1.0),
(1009,54,2,'Product Ten Seven','Brand Two','Eight','(11)','{x:[11],a:["a11"]}',0.0),
(1010,986,6,'Product Six Ten','Brand Six','Eight','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}',3.0),
(1011,100,10,'Product One Ten','Brand Ten','Four','(11)','{x:[11],a:["a11"]}',2.5),
(1012,69,10,'Product Five Seven','Brand Ten','Two','(12,13,14)','{x:[12,13,14],a:["a12","a13","a14"]}',2.5),
(1013,365,4,'Product Two Nine','Brand Four','Ten','(10,11,12)','{x:[10,11,12],a:["a10","a11","a12"]}',1.0),
(1014,455,1,'Product Two Eight','Brand One','Nine','(13,14,15)','{x:[13,14,15],a:["a13","a14","a15"]}',4.0),
(1015,718,4,'Product Nine Two','Brand Four','Eight','(10)','{x:[10],a:["a10"]}',2.0),
(1016,758,9,'Product Eight Ten','Brand Nine','Seven','(13)','{x:[13],a:["a13"]}',3.0),
(1017,493,4,'Product Nine Six','Brand Four','Five','(11,12)','{x:[11,12],a:["a11","a12"]}',0.0),
(1018,413,3,'Product Eight Five','Brand Three','Four','(11,12,13)','{x:[11,12,13],a:["a11","a12","a13"]}',2.0),
(1019,78,4,'Product Six Five','Brand Four','Two','(12)','{x:[12],a:["a12"]}',1.0),
(1020,169,4,'','Brand Four','Eight','(10,11)','{x:[10,11],a:["a10","a11"]}',5.0)
</db_insert>

<metaindex name='META:all'>
<index>test</index>
<index>test_col</index>
</metaindex>

<queries><sphinxql>
select * from META:all;
select title from META:all;
select title a from META:all;
select title a from META:all order by a desc;
select title from META:all where property='Ten';
select title,property from META:all where property='Ten';
select id,property from META:all order by property desc;
select id,property from META:all group by property;

select * from META:all where match('two');
select title from META:all where match('two');
select title a from META:all where match('two');
select title a from META:all where match('two') order by a desc;
select title from META:all where match('two') and property='Ten';
select title,property from META:all where match('two') and property='Ten';
select id,property from META:all where match('two') order by property desc;
select id,property from META:all where match('two') group by property;

select price,brand_id from META:all;
select price a, brand_id b from META:all;
select price a from META:all order by a desc;
select brand_id a from META:all order by a desc;
select price from META:all order by price desc;
select brand_id from META:all order by brand_id desc;
select price,title from META:all where price=20;
select brand_id,title from META:all where brand_id=7;
select id,price from META:all order by price desc;
select id,brand_id from META:all order by brand_id desc;
select id,price from META:all group by price;
select id,brand_id from META:all group by brand_id;

select price,brand_id from META:all where price=493;
select brand_id from META:all where price=493;
select price,brand_id from META:all where price&lt;500;
select brand_id from META:all where price&lt;500;
select price,brand_id from META:all where price&gt;500;
select brand_id from META:all where price&gt;500;

select id from META:all where title!='';
select id from META:all where title='';

select min(length(to_string(title))) from META:all;
select max(length(to_string(title))) from META:all;

select length(title) from META:all;

select id,price from META:all where price=101;

select avg(price) from test_dist;

select brand_id from test_col where price&gt;500;
show meta;
select brand_id from test_col where price&gt;500 /*+ NO_ColumnarScan(price) */;
show meta;

select title from META:all where match('two') and property='Ten';
show meta;

select brand_id from test_col where price&gt;500 and brand_id&gt;5;
show meta;
select brand_id from test_col where price&gt;500 and brand_id&gt;5 /*+ NO_ColumnarScan(price,brand_id) */;
show meta;

select groupby(), count(*) from META:all group by price,brand_id;

select groupby(), count(*) from META:all group by coeff;

select brand_id as b, count(*) FROM META:all GROUP BY b;
</sphinxql></queries>

</test>