<?xml version="1.0" encoding="utf-8"?>
<test>

<name>configless vs columnar</name>

<requires>
	<force-rt/>
	<columnar/>
</requires>

<skip_indexer/>

<config>
searchd
{
	<searchd_Settings/>
	data_dir = <data_path path="data0"/>
}
</config>

<queries>
<sphinxql>
	show tables;
	create table test1 ( title text, tag integer ) engine='columnar';
	create table test2 ( title text, tag integer ) engine='rowwise';
	desc test1;
	desc test2;
	show create table test1;
	show create table test2;

	create table test11 like test1;
	create table test22 like test2;
	desc test11;
	desc test22;
	show create table test11;
	show create table test22;

	drop table test1;
	drop table test2;
	drop table test11;
	drop table test22;

	create table test1 ( title text, uid integer, tags json ) engine='columnar';
	show meta;
	desc test1;
	show create table test1;
	create table test2 like test1;
	show meta;
	desc test2;
	show create table test2;

	drop table test1;
	drop table test2;

	create table test1 ( title text, tag1 integer engine='columnar', tag2 integer engine='rowwise' );
	desc test1;
	show create table test1;
	drop table test1;

	create table test1 ( title text, tag1 integer, tag2 integer engine='rowwise' ) engine='columnar';
	desc test1;
	show create table test1;
	drop table test1;

	create table test1 ( title text, tag1 integer, tag2 integer engine='columnar' ) engine='rowwise';
	desc test1;
	show create table test1;
	drop table test1;

	create table t(f text, s string) engine='columnar';
	insert into t values (1,'text','string');
	select * from t;
	drop table t;

	create table idx(f text, columnar_integer_attribute_with_bitmask bit(1) engine='columnar');
	desc idx;
	show create table idx;
	drop table idx;

	create table col(id, f text, j json engine='columnar');
	show meta;
	desc col;
	drop table col;

	create table test(foo string, mvacol multi engine='rowwise') engine='columnar';
	insert into test values (1, '', (1,2,3));
	select * from test;
	update test set mvacol=(0,1,2,3,4,5,6,7,8,9,10) where id=1;
	select * from test;
	drop table test;

    <!-- regression crash on insert string attrubute into columnar with duplicates -->
    CREATE TABLE test_str(ip string attribute) engine='columnar';
    replace into test_str values(1, '1-0xx.xxx.xxx.xx'),(2,'2xx.xxx.xx.xx'),(1, '1-1xx.xxx.xxx.xx');
    flush ramchunk test_str;
    select * from test_str;
    replace into test_str values(1, '1-0xx.xxx.xxx.xx'),(2,'2xx.xxx.xx.xx'),(1, '1-1xx.xxx.xxx.xx'),(1, '1-2xx.xxx.xxx.xx'),(1, '1-3xx.xxx.xxx.xx'),(3,'3xx.xxx.xx.xx'),(4,'4xx.xxx.xx.xx'),(5,'5xx.xxx.xx.xx');
    replace into test_str values(12,'12xx.xxx.xx.xx'),(11, '11-0xx.xxx.xxx.xx'),(11, '11-1xx.xxx.xxx.xx'),(11, '11-2xx.xxx.xxx.xx'),(13,'13xx.xxx.xx.xx'),(14,'14xx.xxx.xx.xx'),(15,'15xx.xxx.xx.xx');
    flush ramchunk test_str;
    select * from test_str;
	drop table test_str;

    <!-- another regression with columnar duplicates -->
	CREATE TABLE t(ip string attribute) engine='columnar';
	replace into t values(1, 'xx.xxx.xxx.xx'),(2,'xx.xxx.xx.xx'),(1, 'xx.xxx.xxx.xx');
	select * from t order by id asc;
	drop table t;
</sphinxql>
</queries>

</test>