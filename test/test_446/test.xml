<?xml version="1.0" encoding="UTF-8"?>
<test>

<name>bigint timestamp</name>

<config>
indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
	grouping_in_utc = 1
}


source src_bigint
{
    type			= mysql
    <sql_settings/>
    sql_query		= SELECT * FROM test_table_bigint
    sql_attr_bigint	= tm
}


index idx_bigint
{
    source			= src_bigint
    path			= <data_path/>/main_bigint
}

source test
{
	type = mysql
	<sql_settings/>
	sql_query = SELECT * FROM test_table
	sql_attr_uint = aa
    sql_attr_json   = j
    sql_attr_string   = s
}

index test
{
	source	= test
	path	= <data_path/>/test
}

index rt1
{
	type = rt
	path			= <data_path/>/rt1
	rt_mem_limit = 128M
    rt_field = title
    rt_attr_timestamp = tid
}
</config>

<queries>
	<sphinxql>
	<!-- check for bigint values -->

	set global grouping_in_utc=0;
	show variables like 'grouping%';
	select id, year(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;

	<!-- check whether settings works at all -->
	set global grouping_in_utc=1;
	show variables like 'grouping_in_utc';
	<!-- check again -->
	select tm, day(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;
	select tm, month(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;
	select tm, year(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;
	select tm, yearmonth(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;
	select tm, yearmonthday(tm) d from idx_bigint where match('aaaa') group by d WITHIN GROUP order by id desc order by id desc;
    
	<!-- BIGINT() for time functions -->
	SELECT year(4594967295);
	<!-- check BIGINT for day, month, year, yearmonth(), yearmonthday() and crash on localtime overflow -->
	select id, 4594967295 + (id*400000000) as a, yearmonthday(a), yearmonth(a), year(a), month(a), day(a) from test;

    <!-- date_format-->
	SELECT date_format(4594967295, '%m');
	select id, 1096904880 + id * 1000 as a, date_format(a, '%m and year of %Y') from test;

	SELECT bigint(date_format(4594967295, '%m'));
	SELECT sint(date_format(4594967295, '%m'));

	<!-- implicit conversion -->
	select timediff(908, 0);
	select bigint(timediff(908, 0));
	select sint(timediff(908, 0));
	select fibonacci(timediff(60, 0));
	select day(timediff(908, 0));
	select month(timediff(908, 0));
	select year(timediff(908, 0));
	select yearmonth(timediff(908, 0));
	select yearmonthday(timediff(908, 0));
<!--	select hour(timediff(908, 0)); // depends from tz, so excluded from test as non-stable -->
	select minute(timediff(908, 0));
	select second(timediff(908, 0));

    <!-- date_format support for JSON and STRING attributes -->
    SELECT id, j.jdata, s, date_format(j.jdata, 'JSON: %m, year of %Y') as jdata, date_format(s, 'STR: %m, year of %Y') as sdata from test order by id asc;

    <!-- all other date conversions support for JSON and STRING attributes -->
    SELECT id, j.jdata, s, day(j.jdata) jd, day(s) sd, month(j.jdata) jm, month(s) sm, year(j.jdata) jy, year(s) sy, yearmonth(j.jdata) as jym, yearmonth(s) as sym, yearmonthday(j.jdata) as jymd, yearmonthday(s) as symd from test order by id asc;
	</sphinxql>
    
    <sphinxql>
	set global grouping_in_utc=0;
	set global timezone=UTC;
    INSERT into rt1 (id, tid) values (1, 1568577600), (2, '2019-10'),(3, '2019-10-15T20:00');
    SELECT id, tid, date_format(tid, '%Y-%m-%dT%H:%M') as d from rt1 order by id asc;
    </sphinxql>
    
</queries>

<db_create>
CREATE TABLE test_table_bigint
(
	id INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
	tm BIGINT NOT NULL,
	title TEXT NOT NULL
) ENGINE=MYISAM
</db_create>

<db_create>
CREATE TABLE test_table
(
	id INT NOT NULL,
	aa INT NOT NULL,
	title VARCHAR(255) NOT NULL,
    j varchar(100) NOT NULL,
    s varchar(100) NOT NULL
);
</db_create>

<db_insert>								  
	<repeat count="24" vars="stamp" init="5594967295">
		<var name="vals"/>
		<repeat count="89" vars="stamp" inc="3600"><var name="vals" delimiter=",">(0,<stamp/>,'aaaa')</var></repeat>
		INSERT INTO test_table_bigint VALUES <vals/><db_insert/></repeat>
</db_insert>
<db_insert>
INSERT INTO test_table ( id, aa, title, j, s ) VALUES
( 1, 2, 'dummy', '{"jdata":1699852617}', '1681392867' ),
( 10, 3, 'ohai', '{"jdata":1668346467}', '1649856867' ),
( 11, 4, 'ohai2', '{"jdata":1636810467}', '1618320867' )
</db_insert>

<db_drop>DROP TABLE IF EXISTS test_table_bigint</db_drop>
<db_drop>DROP TABLE IF EXISTS test_table;</db_drop>

</test>
