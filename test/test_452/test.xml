<?xml version="1.0" encoding="utf-8"?>
<test>

<name>secondary</name>

<requires>
<secondary/>
<non-rt/>
</requires>

<config>
searchd
{
	<searchd_settings/>
    secondary_indexes = 1
}

source test1
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table1
	sql_attr_uint  = tag
    sql_attr_bool  = flag
	sql_attr_string = extra
	sql_attr_float = coeff
}

source test2
{
	type			= mysql
	<sql_settings/>
	sql_query		= select 1 as id, -1 as tag
	sql_attr_uint  = tag
}

index test1
{
	source 			= test1
	path			= <data_path/>/test1
}

index test2
{
	source 			= test2
	path			= <data_path/>/test2
}

index test3
{
	type = rt
	path			= <data_path/>/test3
	rt_field = title
	rt_attr_uint = idd
    rt_attr_uint = tag
}

source src_test4
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table2
	sql_attr_uint  = tag
}

index test4
{
	source 			= src_test4
	path			= <data_path/>/test4
}

source src_testpoly
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table3
	sql_attr_uint  = x
	sql_attr_uint  = y
}

index testpoly
{
	source 			= src_testpoly
	path			= <data_path/>/testpoly
}
</config>

<db_create>
CREATE TABLE `test_table1` (
  `id` int,
  `title` varchar(255),
  `tag` int,
  `flag` int,
  `extra` varchar(255),
  `coeff` float
);
</db_create>

<db_create>
CREATE TABLE `test_table2` (
  `id` int,
  `title` varchar(255),
  `tag` int
);
</db_create>

<db_create>
CREATE TABLE `test_table3` (
  `id` int,
  `title` varchar(255),
  `x` int,
  `y` int
);
</db_create>

<db_drop>DROP TABLE IF EXISTS test_table1</db_drop>
<db_insert>
insert into test_table1 (id,title, tag, flag,extra,coeff) values
(1,'abc', 1, 1,'', 0.0 ),
(2,'abc', 1, 1,'', -1.0 ),
(3,'abc', 2, 0,'', -10.0 ),
(4,'abc', 1, 1,'1', 10.0 ),
(5,'abc', 2, 0,'1', -100.0 ),
(6,'dec', 1, 0,'1', -100.0 )
</db_insert>

<db_drop>DROP TABLE IF EXISTS test_table2</db_drop>
<db_insert>
	<var name="vals">( 1, 'real word and more', 1)</var>
	<repeat count="1000" vars="i t" inc="2 2" init="10 10"><var name="vals" delimiter=",">( <i/>, 'dummy word not another', <t/> )</var></repeat>
	insert into test_table2 values <vals/>
</db_insert>

<db_drop>DROP TABLE IF EXISTS test_table3</db_drop>
<db_insert>
insert into test_table3 (id,title,x,y) values
(1,'abc', 3, 2),
(2,'abc', 5, 3 ),
(3,'abc', 2, 5 ),
(4,'abc', 4, 6 )
</db_insert>

<queries>
<sphinxql>select * from test1 where flag=1 /*+ SecondaryIndex(flag) */</sphinxql>
<sphinxql>select * from test2 where tag &gt; 10 /*+ SecondaryIndex(tag) */</sphinxql>

<!-- regression empty secondary index crash at the disk chunks with all dead documents -->
<!-- make disk chunk; UPDATE attr there to allov ALTER to work later; DELETE all docs in that disk chunk; regenerate SI with ALTER -->
<sphinxql>
INSERT INTO test3 (id,title,idd) VALUES (11,'abc 1', 1),(12,'abc1', 1),(13,'abc 1', 2);
FLUSH RAMCHUNK test3;
INSERT INTO test3 (id,title,idd) VALUES (21,'abc 2', 1),(22,'abc2', 1),(23,'abc 2', 2);
UPDATE test3 SET tag=1 WHERE id IN (11,12);
DELETE FROM test3 WHERE id in (11,12,13);
ALTER TABLE test3 REBUILD SECONDARY;

SELECT * FROM test3 WHERE idd &gt; 0 ORDER BY id ASC /*+ SecondaryIndex(idd) */
</sphinxql>

<sphinxql>
select * from test4 where tag in (2006) order by id desc /*+ SecondaryIndex(tag) */;
select * from test4 where tag in (2007) order by id desc /*+ SecondaryIndex(tag) */;
select * from test4 where tag in (2010) order by id desc /*+ SecondaryIndex(tag) */;
</sphinxql>

<!-- regression no forced SI at FT -->
<sphinxql>select * from test1 where MATCH('dec') AND tag=1 /*+ SecondaryIndex(tag) */; show meta</sphinxql>

<!-- regression for exclude filters with SI -->
<sphinxql>select id,tag from test1</sphinxql>
<sphinxql>select id,tag from test1 where tag not in (1,2) /*+ SecondaryIndex(tag) */; show meta</sphinxql>
<sphinxql>select id,tag from test1 where tag not in (1) /*+ SecondaryIndex(tag) */; show meta</sphinxql>
<sphinxql>select id,tag from test1 where tag not in (2) /*+ SecondaryIndex(tag) */; show meta</sphinxql>

<!-- extra SI on poly2d -->
<sphinxql>SELECT * FROM testpoly order by id asc</sphinxql>
<sphinxql>SELECT x,y,CONTAINS(POLY2D(1,1,1,7,7,7,7,1),x,y) a FROM testpoly WHERE a=1 order by id asc /*+ No_SecondaryIndex(x,y) */; show meta</sphinxql>
<sphinxql>SELECT x,y,CONTAINS(POLY2D(1,1,1,7,7,7,7,1),x,y) a FROM testpoly WHERE a=1 order by id asc /*+ SecondaryIndex(x,y) */; show meta</sphinxql>
<sphinxql>SELECT x,y,CONTAINS(POLY2D(4,1,4,7,7,7,7,1),x,y) a FROM testpoly WHERE a=1 order by id asc /*+ No_SecondaryIndex(x,y) */; show meta</sphinxql>
<sphinxql>SELECT x,y,CONTAINS(POLY2D(4,1,4,7,7,7,7,1),x,y) a FROM testpoly WHERE a=1 order by id asc /*+ SecondaryIndex(x,y) */; show meta</sphinxql>

</queries>

</test>