<?xml version="1.0" encoding="utf-8"?>
<test>
<name>PREPARE/EXECUTE performance and resource management</name>

<requires><force-rt/></requires>
<skip_indexer/>

<config>
searchd
{
	<searchd_settings/>
	data_dir = <data_path/>
}
</config>

<sphqueries>
<sphinxql>
<!-- Create a larger dataset for performance testing -->
CREATE TABLE perf_test(id BIGINT, data TEXT, num_value INTEGER, float_value FLOAT, json_data JSON);

<!-- Insert bulk data for performance testing -->
INSERT INTO perf_test(id, data, num_value, float_value, json_data) VALUES 
(1, 'performance test data row one', 100, 1.1, '{"test": 1, "value": "alpha"}'),
(2, 'performance test data row two', 200, 2.2, '{"test": 2, "value": "beta"}'),
(3, 'performance test data row three', 300, 3.3, '{"test": 3, "value": "gamma"}'),
(4, 'performance test data row four', 400, 4.4, '{"test": 4, "value": "delta"}'),
(5, 'performance test data row five', 500, 5.5, '{"test": 5, "value": "epsilon"}'),
(6, 'performance test data row six', 600, 6.6, '{"test": 6, "value": "zeta"}'),
(7, 'performance test data row seven', 700, 7.7, '{"test": 7, "value": "eta"}'),
(8, 'performance test data row eight', 800, 8.8, '{"test": 8, "value": "theta"}'),
(9, 'performance test data row nine', 900, 9.9, '{"test": 9, "value": "iota"}'),
(10, 'performance test data row ten', 1000, 10.0, '{"test": 10, "value": "kappa"}');

<!-- Test 1: Rapid PREPARE/EXECUTE/DEALLOCATE cycles -->
PREPARE rapid_1 FROM 'SELECT COUNT(*) FROM perf_test';
EXECUTE rapid_1;
DEALLOCATE PREPARE rapid_1;

PREPARE rapid_2 FROM 'SELECT AVG(num_value) FROM perf_test';
EXECUTE rapid_2;
DEALLOCATE PREPARE rapid_2;

PREPARE rapid_3 FROM 'SELECT MAX(float_value) FROM perf_test';
EXECUTE rapid_3;
DEALLOCATE PREPARE rapid_3;

<!-- Test 2: Multiple executions of the same prepared statement -->
PREPARE multi_exec FROM 'SELECT id, data FROM perf_test WHERE num_value &gt; 500';
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;
EXECUTE multi_exec;

<!-- Test 3: Interleaved PREPARE and EXECUTE operations -->
PREPARE interleaved_1 FROM 'SELECT * FROM perf_test WHERE id = 1';
PREPARE interleaved_2 FROM 'SELECT * FROM perf_test WHERE id = 2';
PREPARE interleaved_3 FROM 'SELECT * FROM perf_test WHERE id = 3';

EXECUTE interleaved_3;
EXECUTE interleaved_1;
EXECUTE interleaved_2;
EXECUTE interleaved_1;
EXECUTE interleaved_3;
EXECUTE interleaved_2;

<!-- Test 4: Complex query reuse -->
PREPARE complex_reuse FROM 'SELECT 
  id,
  data,
  num_value,
  float_value,
  num_value * float_value as product,
  SQRT(num_value) as sqrt_num,
  LOG(float_value) as log_float,
  CASE 
    WHEN num_value &lt; 300 THEN "low"
    WHEN num_value &lt; 700 THEN "medium"
    ELSE "high"
  END as category,
  LENGTH(data) as data_length,
  UPPER(SUBSTRING(data, 1, 10)) as data_prefix
FROM perf_test 
WHERE num_value BETWEEN 200 AND 800
ORDER BY num_value * float_value DESC';

EXECUTE complex_reuse;
EXECUTE complex_reuse;
EXECUTE complex_reuse;

<!-- Test 5: Memory pressure simulation - many prepared statements -->
PREPARE mem_test_001 FROM 'SELECT 1 as test_id, "statement_001" as name';
PREPARE mem_test_002 FROM 'SELECT 2 as test_id, "statement_002" as name';
PREPARE mem_test_003 FROM 'SELECT 3 as test_id, "statement_003" as name';
PREPARE mem_test_004 FROM 'SELECT 4 as test_id, "statement_004" as name';
PREPARE mem_test_005 FROM 'SELECT 5 as test_id, "statement_005" as name';
PREPARE mem_test_006 FROM 'SELECT 6 as test_id, "statement_006" as name';
PREPARE mem_test_007 FROM 'SELECT 7 as test_id, "statement_007" as name';
PREPARE mem_test_008 FROM 'SELECT 8 as test_id, "statement_008" as name';
PREPARE mem_test_009 FROM 'SELECT 9 as test_id, "statement_009" as name';
PREPARE mem_test_010 FROM 'SELECT 10 as test_id, "statement_010" as name';
PREPARE mem_test_011 FROM 'SELECT 11 as test_id, "statement_011" as name';
PREPARE mem_test_012 FROM 'SELECT 12 as test_id, "statement_012" as name';
PREPARE mem_test_013 FROM 'SELECT 13 as test_id, "statement_013" as name';
PREPARE mem_test_014 FROM 'SELECT 14 as test_id, "statement_014" as name';
PREPARE mem_test_015 FROM 'SELECT 15 as test_id, "statement_015" as name';
PREPARE mem_test_016 FROM 'SELECT 16 as test_id, "statement_016" as name';
PREPARE mem_test_017 FROM 'SELECT 17 as test_id, "statement_017" as name';
PREPARE mem_test_018 FROM 'SELECT 18 as test_id, "statement_018" as name';
PREPARE mem_test_019 FROM 'SELECT 19 as test_id, "statement_019" as name';
PREPARE mem_test_020 FROM 'SELECT 20 as test_id, "statement_020" as name';

<!-- Execute some of them in random order -->
EXECUTE mem_test_015;
EXECUTE mem_test_003;
EXECUTE mem_test_018;
EXECUTE mem_test_007;
EXECUTE mem_test_012;
EXECUTE mem_test_001;
EXECUTE mem_test_020;
EXECUTE mem_test_009;

<!-- Test 6: Very large query strings -->
PREPARE large_query FROM 'SELECT 
  id, data, num_value, float_value,
  "this is a very long string literal that tests how the prepared statement system handles large amounts of text in the query itself without causing memory issues or parsing problems when stored and executed multiple times" as long_string,
  CONCAT(data, " - extended with more text to make the query longer and test string handling capabilities in prepared statements") as extended_data,
  num_value + 1 as num_plus_one,
  num_value + 2 as num_plus_two,
  num_value + 3 as num_plus_three,
  num_value + 4 as num_plus_four,
  num_value + 5 as num_plus_five,
  float_value * 1.1 as float_times_1_1,
  float_value * 1.2 as float_times_1_2,
  float_value * 1.3 as float_times_1_3,
  float_value * 1.4 as float_times_1_4,
  float_value * 1.5 as float_times_1_5
FROM perf_test 
WHERE num_value &gt; 100 AND float_value &gt; 1.0 AND LENGTH(data) &gt; 10
ORDER BY num_value ASC, float_value DESC, id ASC
LIMIT 5';

EXECUTE large_query;

<!-- Test 7: Edge case - empty result sets -->
PREPARE empty_result FROM 'SELECT * FROM perf_test WHERE id = 999999';
EXECUTE empty_result;
EXECUTE empty_result;
EXECUTE empty_result;

<!-- Test 8: Resource cleanup in different orders -->
DEALLOCATE PREPARE mem_test_010;
DEALLOCATE PREPARE mem_test_001;
DEALLOCATE PREPARE mem_test_020;
DEALLOCATE PREPARE mem_test_005;
DEALLOCATE PREPARE mem_test_015;

EXECUTE mem_test_002;
EXECUTE mem_test_019;

DEALLOCATE PREPARE mem_test_002;
DEALLOCATE PREPARE mem_test_003;
DEALLOCATE PREPARE mem_test_004;

<!-- Test 9: Statements with varying complexity -->
PREPARE simple FROM 'SELECT 1';
PREPARE medium FROM 'SELECT id, num_value FROM perf_test WHERE num_value &gt; 500';
PREPARE complex FROM 'SELECT id, AVG(num_value) OVER (ORDER BY id ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) as moving_avg FROM perf_test';

EXECUTE simple;
EXECUTE medium;
EXECUTE complex;
EXECUTE simple;
EXECUTE complex;
EXECUTE medium;

<!-- Test 10: Bulk deallocate -->
DEALLOCATE PREPARE multi_exec;
DEALLOCATE PREPARE interleaved_1;
DEALLOCATE PREPARE interleaved_2;
DEALLOCATE PREPARE interleaved_3;
DEALLOCATE PREPARE complex_reuse;
DEALLOCATE PREPARE mem_test_006;
DEALLOCATE PREPARE mem_test_007;
DEALLOCATE PREPARE mem_test_008;
DEALLOCATE PREPARE mem_test_009;
DEALLOCATE PREPARE mem_test_011;
DEALLOCATE PREPARE mem_test_012;
DEALLOCATE PREPARE mem_test_013;
DEALLOCATE PREPARE mem_test_014;
DEALLOCATE PREPARE mem_test_016;
DEALLOCATE PREPARE mem_test_017;
DEALLOCATE PREPARE mem_test_018;
DEALLOCATE PREPARE mem_test_019;
DEALLOCATE PREPARE large_query;
DEALLOCATE PREPARE empty_result;
DEALLOCATE PREPARE simple;
DEALLOCATE PREPARE medium;
DEALLOCATE PREPARE complex;

<!-- Test 11: Post-cleanup execution attempts (should fail) -->
EXECUTE multi_exec;
EXECUTE complex_reuse;
EXECUTE mem_test_010;

<!-- Test 12: Performance test with data modifications -->
PREPARE insert_perf FROM 'INSERT INTO perf_test(id, data, num_value, float_value) VALUES (1001, "performance insert test", 9999, 99.99)';
EXECUTE insert_perf;

PREPARE update_perf FROM 'UPDATE perf_test SET num_value = num_value + 1 WHERE id = 1001';
EXECUTE update_perf;
EXECUTE update_perf;
EXECUTE update_perf;

PREPARE select_updated FROM 'SELECT * FROM perf_test WHERE id = 1001';
EXECUTE select_updated;

PREPARE delete_perf FROM 'DELETE FROM perf_test WHERE id = 1001';
EXECUTE delete_perf;

EXECUTE select_updated;

<!-- Cleanup -->
DEALLOCATE PREPARE insert_perf;
DEALLOCATE PREPARE update_perf;
DEALLOCATE PREPARE select_updated;
DEALLOCATE PREPARE delete_perf;

DROP TABLE perf_test;

</sphinxql>
</sphqueries>

</test>